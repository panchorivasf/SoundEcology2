[{"path":"https://panchorivasf.github.io/SoundEcology2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Francisco Rivas. Maintainer, author. Luis Villanueva-Rivera. Author. Bryan Pijanowski. Author. Angel Ramirez. Contributor.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rivas F, Villanueva-Rivera L, Pijanowski B (2025). SoundEcology2: Soundscape Ecology. R package version 0.0.11, https://github.com/panchorivasf/SoundEcology2.","code":"@Manual{,   title = {SoundEcology2: Soundscape Ecology},   author = {Francisco Rivas and Luis Villanueva-Rivera and Bryan Pijanowski},   year = {2025},   note = {R package version 0.0.11},   url = {https://github.com/panchorivasf/SoundEcology2}, }"},{"path":"https://panchorivasf.github.io/SoundEcology2/index.html","id":"output-format","dir":"","previous_headings":"","what":"Output format:","title":"Soundscape Ecology","text":"output index calculation now long-format tibble (data frame).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/index.html","id":"spectrogram-settings","dir":"","previous_headings":"","what":"Spectrogram settings:","title":"Soundscape Ecology","text":"first version package developed spectro() function seewave package normalize spectrograms default. one early seewave updates, behavior changed, spectrograms normalized maximum value within recording, problematic comparing metrics based non-focal recordings (.e., soundscape recordings). SoundEcology2 uses non-normalized spectrograms default allows modify parameters (e.g., frequency resolution).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/index.html","id":"db-scale","dir":"","previous_headings":"","what":"dB scale:","title":"Soundscape Ecology","text":"original documentation stated amplitude threshold (‘noise floor’) ADI AEI functions dBFS (decibels Full Scale). inaccurate, since decibels actually relative maximum amplitude recording (normalized default). SoundEcology2 uses dBFS default, computed based bit depth recording.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/index.html","id":"frequency-resolution","dir":"","previous_headings":"","what":"Frequency resolution:","title":"Soundscape Ecology","text":"ADI AEI functions now allow user select frequency resolution via freq.res parameter. Originally, hard-coded 10 Hz per bin, meaning recording 48 kHz sampling rate, window size 4800 samples. overemphasizes frequency resolution, blurring temporal features spectrogram, artificially increasing band occupancy along time axis. Moreover, researchers aim conduct standardized analyses across studies, using FFT window size yield resolution sampling frequency . SoundEcology2, window size (window length) parameter replaced frequency resolution (‘freq.res’), Hz per bin.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/index.html","id":"diversity-indices","dir":"","previous_headings":"","what":"Diversity indices:","title":"Soundscape Ecology","text":"Acoustic diversity evenness indices now allow users specify proportions frequency band computed. original code calculated proportion cells threshold cells within frequency band. true application Shannon’s diversity, typically considers proportion individuals species relative entire population, including species community. address , added new option calculating proportion active cells spectrogram matrix via ‘prop.den’ (.e., proportion denominator) argument: Option ‘1’ ‘classic’ ADI (.e., within frequency band). Option ‘2’ calculates proportion entire range frequencies selected user analysis (.e., min.freq max.freq), considering cells threshold matrix denominator. option closer “real Shannon’s diversity”. also included Frequency-dependent Acoustic Diversity Index Xu et al. (2023), obtains “floating” noise profile (.e., row-wise) noise reduction calculating Acoustic Diversity Index doesn’t use normalized spectrogram. Alternatively can take noise sample reduce noise analyzed files. Three functions available calculate index: frequency_dependent_acoustic_diversity(): original implementation Xu et al. (2023). fadi(): harmonized implementation yields output format indices SoundEcology2. fadi_folder(): batch option fadi().","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/index.html","id":"channel-selection","dir":"","previous_headings":"","what":"Channel selection:","title":"Soundscape Ecology","text":"Users can now select channel analyze, option merge channels mono file. can potentially speed index processing subsequent analyses.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/index.html","id":"new-indices","dir":"","previous_headings":"","what":"New indices:","title":"Soundscape Ecology","text":"addition original indices (.e., ADI, AEI, ACI, BI, NDSI), SoundEcology2 allows calculate Frequency Cover Indices (FCI): Low-Frequency Cover (LFC), Mid-Frequency Cover (MFC), High-Frequency Cover (HFC), user-defined frequency bands. calculation indices differ Towsey (2017) don’t apply noise reduction spectrogram, may alter original energy distribution target signals. Instead, use binary spectrogram, cells cutoff threshold considered. also included Ultra-Frequency Cover (UFC) measure occupancy ultrasonic band, available. Three experimental acoustic indices introduced: 1) Narrow-band Activity Index (NBAI): summarizes percentage active cells frequency bin, allowing monitor persistent sound sources (e.g., crickets, cicadas); 2) Broad-band Activity Index (BBAI): summarizes ‘clicks’ spectrogram, defined clusters energy along column (time frame), allowing monitor activity ‘noisy’ insects (e.g., cicadas katydids) effect indices, well geophonic noise sources rain heavy wind generally outliers. 3) Trill Activity Index (TAI), similar ACI, summarizes variability sound energy across frequency bins, sensitive stridulations bush-crickets katydids. indices can also extracted spectral indices (.e., vector length equal number frequency bins), can used craft False-color Spectrograms. Two function types available calculating acoustic indices (‘index’ replaces name index): basic function index() allows users try index single Wave object. requires file imported R readWave() function tuneR. ‘folder’ function, index_folder(), takes path directory analyzes WAV files inside folder. Alternatively, list selected files current working directory can provided. Finally, added several functions facilitate common tasks, including: list_waves(): Generates list WAV files directory. list_csvs(): Generates list CSV files directory. wave_integrity(): function check integrity WAV files directory. produces report last day complete recordings days corrupted files, along corresponding plot. import_stereo_mix(): Imports stereo wave file mono Wave object mixing channels. import_indices(): Imports batch CSV files index data binds single tibble. import_kaleidoscope(): Imports Excel file generated Kaleidoscope (Wildlife Acoustics). Supported formats CSV, XLS, XLSX. harmonize_index(): Harmonizes tibbles SoundEcology2 legacy soundecology package. var_diel_spec(): Generates Variance Diel Spectrogram (VDS) day’s worth recordings folder. output images PNG format. ts_diel(): Visualizes day’s worth acoustic indices interactive, smoothed time series using Plotly package. plots can stored interactive HTML files static PNGs. ts_long(): Plots long time-series acoustic index, summarizing data day, week, month separate tibbles. ts_plus_images(): Plots time-series pop-spectrograms (e.g., generated var_diel_spec(), false-color spectrograms, images). path folder containing spectrograms provided. image files must contain date format “YYYYMMDD” extension.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/index.html","id":"how-to-install","dir":"","previous_headings":"","what":"How to install:","title":"Soundscape Ecology","text":"remotes installed, use:","code":"install.packages('remotes') remotes::install_github(\"panchorivasf/SoundEcology2\", dependencies = TRUE)"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aci.html","id":null,"dir":"Reference","previous_headings":"","what":"Acoustic Complexity Index — aci","title":"Acoustic Complexity Index — aci","text":"Acoustic Complexity Index (ACI) Pieretti, et al. 2011. ACI based \"observation many biotic sounds, bird songs, characterized intrinsic variability intensities, types human generated noise (car passing airplane transit) present constant intensity values\" (Pieretti, et al. 2011).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Acoustic Complexity Index — aci","text":"","code":"aci(   wave,   freq.res = 50,   win.fun = \"hanning\",   min.freq = NA,   max.freq = NA,   j = NA,   noise.red = 0,   rm.offset = TRUE )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Acoustic Complexity Index — aci","text":"wave object class Wave imported readWave function tuneR package. freq.res numeric. frequency resolution use (Hz per bin) determine window length FFT (sampling rate / frequency resolution). win.fun window function (filter handle spectral leakage); \"bartlett\", \"blackman\", \"flattop\", \"hamming\", \"hanning\", \"rectangle\". min.freq minimum frequency use calculating value, Hertz. Default = 0. max.freq maximum frequency use calculating value, Hertz. Default = NA (Nyquist). j cluster size, seconds. Default = NA (Duration audio file). noise.red numeric; controls application noise reduction. set 1, noise reduction applied row subtracting median amplitude values. set 2, noise reduction applied column similarly. set 0, noise reduction applied. rm.offset logical; set TRUE, function remove DC offset computing ADI. Default = TRUE.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Acoustic Complexity Index — aci","text":"tibble (data frame) ACI values channel (stereo), metadata, parameters used calculation.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Acoustic Complexity Index — aci","text":"index tested ACItot calculated using SoundscapeMeter v 1.0.14.05.2012, courtesy . Farina. results accumulative. long samples return comparatively larger values ACI. current version (soundecology2) normalizes output (.e., \"j\" equals duration audio file) make equivalent default results seewave's version. Reference: N. Pieretti, . Farina, D. Morri. 2011. new methodology infer singing activity avian community: Acoustic Complexity Index (ACI). Ecological Indicators 11: 868-873.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Acoustic Complexity Index — aci","text":"","code":"if (FALSE) { # \\dontrun{ aci(tropicalsound)} # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aci_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Acoustic Complexity Index - Batch process — aci_folder","title":"Acoustic Complexity Index - Batch process — aci_folder","text":"Acoustic Complexity Index - Batch process","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aci_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Acoustic Complexity Index - Batch process — aci_folder","text":"","code":"aci_folder(   folder = NULL,   list = NULL,   start = 0,   end = 1,   unit = \"minutes\",   save.csv = TRUE,   csv.name = \"aci_results.csv\",   freq.res = 50,   win.fun = \"hanning\",   min.freq = NA,   max.freq = NA,   j = NA,   noise.red = 2,   rm.offset = TRUE,   n.cores = -1 )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aci_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Acoustic Complexity Index - Batch process — aci_folder","text":"folder path folder audio files import. list optional list (subset) files folder analyze. provided, files outside list excluded. start numerical. start reading Wave. end numerical. end reading Wave. unit character. Unit measurement 'start' 'end'. Options 'samples', 'seconds', 'minutes', 'hours'. Default 'minutes'. save.csv logical. Whether save csv working directory. csv.name character vector. 'save.csv' TRUE, optionally provide file name. freq.res numeric. frequency resolution use (Hz per bin) determine window length FFT (sampling rate / frequency resolution). win.fun window function (filter handle spectral leakage); \"bartlett\", \"blackman\", \"flattop\", \"hamming\", \"hanning\", \"rectangle\". min.freq minimum frequency use calculating value, Hertz. Default = 0. max.freq maximum frequency use calculating value, Hertz. Default = NA (Nyquist). j cluster size, seconds. Default = NA (Duration audio file). noise.red numeric; controls application noise reduction. set 1, noise reduction applied row subtracting median amplitude values. set 2, noise reduction applied column similarly. set 0, noise reduction applied. rm.offset logical; set TRUE, function remove DC offset computing ADI. Default = TRUE. n.cores number cores use parallel processing. Use n.cores = -1 use one core. Default NULL (single-core processing). recursive Logical. Whether search subfolders. Default TRUE.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aci_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Acoustic Complexity Index - Batch process — aci_folder","text":"tibble (data frame) ACI values channel (stereo), metadata, parameters used calculation.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aci_folder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Acoustic Complexity Index - Batch process — aci_folder","text":"Optimized facilitate working folder audio files importing R. Modifications Francisco Rivas (frivasfu@purdue.edu // fcorivasf@gmail.com) April 2024","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aci_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Acoustic Complexity Index - Batch process — aci_folder","text":"","code":"aci_folder(path/to/folder) #> Working on it... #> Error: object 'path' not found"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/add_replicate_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Add replicate id for a dataset with severall treatments — add_replicate_id","title":"Add replicate id for a dataset with severall treatments — add_replicate_id","text":"Add replicate id dataset severall treatments","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/add_replicate_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add replicate id for a dataset with severall treatments — add_replicate_id","text":"","code":"add_replicate_id(data, treatment = \"treatment\")"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/add_replicate_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add replicate id for a dataset with severall treatments — add_replicate_id","text":"data data frame treatment name column containing treatment identifiers","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/add_replicate_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add replicate id for a dataset with severall treatments — add_replicate_id","text":"data frame treatment_id column","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/add_replicate_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add replicate id for a dataset with severall treatments — add_replicate_id","text":"","code":"add_replicate_id(my_dataset, treatment = 'zone') #> Error: object 'my_dataset' not found"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi.html","id":null,"dir":"Reference","previous_headings":"","what":"Acoustic Diversity Index — adi","title":"Acoustic Diversity Index — adi","text":"Acoustic Diversity Index Villanueva-Rivera et al. 2011. ADI calculated dividing spectrogram frequency bands (default 10), taking proportion energy band energy threshold (default -50 dBFS), calculating Shannon's Diversity proportions. new version allows user choose different ways compute proportions calculating Shannon, among new parameter options (see Details).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Acoustic Diversity Index — adi","text":"","code":"adi(   wave,   freq.res = 50,   win.fun = \"hanning\",   min.freq = 0,   max.freq = 10000,   n.bands = 10,   cutoff = -60,   norm.spec = FALSE,   noise.red = 0,   rm.offset = TRUE,   props = TRUE,   prop.den = 2,   db.fs = TRUE,   use.vegan = FALSE )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Acoustic Diversity Index — adi","text":"wave object class Wave imported readWave function tuneR package. freq.res Numeric. Frequency resolution Hz. value determines \"height\" frequency bin , therefore, window length used (sampling rate / frequency resolution). win.fun window function (filter handle spectral leakage); \"bartlett\", \"blackman\", \"flattop\", \"hamming\", \"hanning\", \"rectangle\". min.freq minimum frequency compute spectrogram. max.freq maximum frequency compute spectrogram. n.bands number bands split spectrogram. cutoff dB threshold calculate energy proportions. norm.spec logical; TRUE, spectrogram normalized, scaled maximum value (recommended normalized spectrograms different SNR comparable). noise.red numeric; controls application noise reduction. set 1, noise reduction applied row subtracting median amplitude values. set 2, noise reduction applied column similarly. set 0, noise reduction applied. rm.offset logical; set TRUE, function remove DC offset computing ADI. Default = TRUE. props logical; set TRUE, function stores energy proportion values frequency band channel. Default = TRUE. prop.den numeric; indicates energy proportion calculated. db.fs logical; TRUE, amplitude scale expressed decibels Full Scale (dBFS). used norm = FALSE. use.vegan logical; TRUE, diversity() function vegan package called compute Shannon's entropy. intended user wants obtain result equivalent original soundecology package. Default = FALSE.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Acoustic Diversity Index — adi","text":"tibble (data frame) ADI values channel (stereo), metadata, parameters used calculation.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Acoustic Diversity Index — adi","text":"Options 'prop.den' parameter: 1 = original calculation \"soundecology\" package applied. denominator proportion equals cells frequency band. 2 = \"true Shannon\" proportion calculated, \"whole community\" equals cells decibel threshold across spectrogram ('max_freq'). Another important update now spectrogram normalized default, made recordings#' different signal--noise ratio comparable.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Acoustic Diversity Index — adi","text":"","code":"data(tropicalsound) #> Warning: data set 'tropicalsound' not found adi(tropicalsound) #> Error: object 'tropicalsound' not found"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Acoustic Diversity Index on the Files in a Folder — adi_folder","title":"Calculate the Acoustic Diversity Index on the Files in a Folder — adi_folder","text":"Calculates Acoustic Diversity Index files folder, extended parameter options. uses parallel processing one available cores. Modifications Francisco Rivas (frivasfu@purdue.edu // fcorivasf@gmail.com)  April 2024.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Acoustic Diversity Index on the Files in a Folder — adi_folder","text":"","code":"adi_folder(   folder = NULL,   list = NULL,   recursive = FALSE,   start = 0,   end = 1,   unit = \"minutes\",   save.csv = TRUE,   csv.name = \"adi_results.csv\",   freq.res = 50,   win.fun = \"hanning\",   min.freq = 0,   max.freq = 10000,   n.bands = 10,   cutoff = -60,   norm.spec = FALSE,   noise.red = 0,   rm.offset = TRUE,   props = FALSE,   prop.den = 1,   db.fs = TRUE,   use.vegan = FALSE,   n.cores = -1 )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Acoustic Diversity Index on the Files in a Folder — adi_folder","text":"folder path folder audio files import. list optional list (subset) files folder analyze. provided, files outside list excluded. recursive logical. Whether search Wave files subfolders. Default TRUE. start numerical. start reading Wave. end numerical. end reading Wave. unit character. Unit measurement 'start' 'end'. Options 'samples', 'seconds', 'minutes', 'hours'. Default 'minutes'. save.csv logical. Whether save csv working directory. csv.name character vector. 'save.csv' TRUE, optionally provide file name. freq.res Numeric. Frequency resolution Hz. value determines \"height\" frequency bin , therefore, window length used (sampling rate / frequency resolution). win.fun window function (filter handle spectral leakage); \"bartlett\", \"blackman\", \"flattop\", \"hamming\", \"hanning\", \"rectangle\". min.freq minimum frequency compute spectrogram max.freq maximum frequency compute spectrogram n.bands number bands split spectrogram cutoff dB threshold calculate energy proportions (normspec = FALSE, set 5 ) norm.spec logical. Whether normalize spectrogram (recommended) (normalized spectrograms different SNR comparable). noise.red numeric. noise reduction (subtract median amplitude values); 0=none, 1=rows, 2=columns. props logical. Whether store energy proportion values frequency band channel (default) . prop.den numeric. Indicates energy proportion calculated. db.fs logical; TRUE, amplitude scale expressed decibels Full Scale (dBFS). used norm = FALSE. use.vegan logical; TRUE, diversity() function vegan package called compute Shannon's entropy. Default = FALSE. n.cores number cores use parallel processing. Use n.cores = -1 use one core. Default NULL (single-core processing). rmoff logical. Whether remove DC offset computing ADI (recommended) .","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Acoustic Diversity Index on the Files in a Folder — adi_folder","text":"tibble (data frame) ADI values channel (stereo), metadata, parameters used calculation.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi_folder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the Acoustic Diversity Index on the Files in a Folder — adi_folder","text":"Options propden: 1 = original calculation \"soundecology\" package applied. denominator proportion equals cells frequency band. 2 = \"true Shannon\" proportion calculated, \"whole population across species\" equals cells decibel threshold across spectrogram ('max.freq') uses parallel processing one available cores. Optimized facilitate working list audio files importing R. Modifications Francisco Rivas (frivasfu@purdue.edu // fcorivasf@gmail.com) April 2024","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Acoustic Diversity Index on the Files in a Folder — adi_folder","text":"","code":"adi_folder(\"path/to/folder\") #> Working on it... #> Error in setwd(folder): cannot change working directory"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"ADI Heatmap — adi_heatmap","title":"ADI Heatmap — adi_heatmap","text":"Produces heatmap proportions used calculate ADI day data. current version supports data frames describing stereo files duty cycle 1 ; 9 .","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ADI Heatmap — adi_heatmap","text":"","code":"adi_heatmap(df, plot.title = \"\")"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ADI Heatmap — adi_heatmap","text":"df data frame ADI data 1 day plot.title Character; title plot","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ADI Heatmap — adi_heatmap","text":"heatmap plot created ggplot2.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/adi_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ADI Heatmap — adi_heatmap","text":"","code":"adi_heatap(adi20230903, \"ADI proportions\") #> Error in adi_heatap(adi20230903, \"ADI proportions\"): could not find function \"adi_heatap\""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aei.html","id":null,"dir":"Reference","previous_headings":"","what":"Acoustic Evenness Index — aei","title":"Acoustic Evenness Index — aei","text":"Acoustic Evenness Index Villanueva-Rivera et al. 2011. AEI calculated dividing spectrogram frequency bands (default 10), taking proportion energy band energy threshold, calculating Gini Coefficient proportions. new version allows user choose different ways compute proportions calculating Gini, among new parameter options (see Details)","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aei.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Acoustic Evenness Index — aei","text":"","code":"aei(   wave,   freq.res = 50,   win.fun = \"hanning\",   min.freq = 0,   max.freq = 10000,   n.bands = 10,   cutoff = -60,   norm.spec = FALSE,   noise.red = 0,   rm.offset = TRUE,   props = TRUE,   prop.den = 1,   db.fs = TRUE )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aei.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Acoustic Evenness Index — aei","text":"wave object class Wave imported readWave function tuneR package. win.fun window function (filter handle spectral leakage); \"bartlett\", \"blackman\", \"flattop\", \"hamming\", \"hanning\", \"rectangle\". min.freq minimum frequency compute spectrogram. max.freq maximum frequency compute spectrogram. n.bands number bands split spectrogram. cutoff dB threshold calculate energy proportions. norm.spec logical; TRUE, spectrogram normalized, scaled maximum value (recommended normalized spectrograms different SNR comparable). noise.red numeric; controls application noise reduction. set 1, noise reduction applied row subtracting median amplitude values. set 2, noise reduction applied column similarly. set 0, noise reduction applied. rm.offset logical; set TRUE, function remove DC offset computing ADI. Default = TRUE. props logical; set TRUE, function stores energy proportion values frequency band channel. Default = TRUE. prop.den numeric; indicates energy proportion calculated. db.fs logical; TRUE, amplitude scale expressed decibels Full Scale (dBFS). used norm = FALSE. frew.res frequency resolution  (Hz per bin) use. value window length FFT calculated (sampling rate / frequency resolution).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aei.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Acoustic Evenness Index — aei","text":"tibble (data frame) AEI values channel (stereo), metadata, parameters used calculation.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aei.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Acoustic Evenness Index — aei","text":"","code":"aei(tropicalsound) #> Error: object 'tropicalsound' not found"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aei_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Acoustic Evenness Index - folder input — aei_folder","title":"Acoustic Evenness Index - folder input — aei_folder","text":"Calculates Acoustic Evenness Index files folder, extended parameter options. uses parallel processing one available cores. Modifications Francisco Rivas (frivasfu@purdue.edu // fcorivasf@gmail.com)  April 2024.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aei_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Acoustic Evenness Index - folder input — aei_folder","text":"","code":"aei_folder(   folder = NULL,   list = NULL,   recursive = FALSE,   start = 0,   end = 1,   unit = \"minutes\",   save.csv = TRUE,   csv.name = \"aei_results.csv\",   freq.res = 50,   win.fun = \"hanning\",   min.freq = 0,   max.freq = 10000,   n.bands = 10,   cutoff = -60,   norm.spec = FALSE,   noise.red = 0,   rm.offset = TRUE,   props = TRUE,   prop.den = 1,   db.fs = TRUE,   n.cores = -1 )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aei_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Acoustic Evenness Index - folder input — aei_folder","text":"folder path folder audio files import. list optional list (subset) files folder analyze. provided, files outside list excluded. recursive Logical. Whether search subfolders. Default TRUE. start numerical. start reading Wave. end numerical. end reading Wave. unit character. Unit measurement 'start' 'end'. Options 'samples', 'seconds', 'minutes', 'hours'. Default 'minutes'. save.csv logical. Whether save csv working directory. csv.name character vector. 'save.csv' TRUE, optionally provide file name. win.fun window function (filter handle spectral leakage); \"bartlett\", \"blackman\", \"flattop\", \"hamming\", \"hanning\", \"rectangle\". min.freq minimum frequency compute spectrogram max.freq maximum frequency compute spectrogram n.bands number bands split spectrogram cutoff dB threshold calculate energy proportions (norm.spec = FALSE, set 5 ) norm.spec logical. Whether normalize spectrogram (recommended) (normalized spectrograms different SNR comparable). noise.red numeric. noise reduction (subtract median amplitude values); 1=rows, 2=columns, 3=none. rm.offset logical. Whether remove DC offset computing aei (recommended) . props logical. Whether store energy proportion values frequency band channel (default) . prop.den numeric. Indicates energy proportion calculated manipulating denominator. n.cores number cores use parallel processing. Use n.cores = -1 use one core. Default NULL (single-core processing). frew.res frequency resolution  (Hz per bin) use. value window length FFT calculated (sampling rate / frequency resolution).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aei_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Acoustic Evenness Index - folder input — aei_folder","text":"tibble (data frame) aei values channel (stereo), metadata, parameters used calculation.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aei_folder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Acoustic Evenness Index - folder input — aei_folder","text":"Options prop.den: 1 = original calculation \"soundecology\" package applied. denominator proportion equals cells frequency band. 2 = \"whole population across species\" equals cells decibel threshold across spectrogram ('max.freq') 3 = \"whole population across species\" equals cells decibel threshold across whole spectrogram (Nyquist frequency. might return smaller range values. uses parallel processing one available cores. Optimized facilitate working list audio files importing R. Modifications Francisco Rivas (frivasfu@purdue.edu // fcorivasf@gmail.com) April 2024","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/aei_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Acoustic Evenness Index - folder input — aei_folder","text":"","code":"aei_folder(\"path/to/folder\") #> Working on it... #> Error in setwd(folder): cannot change working directory"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bbai.html","id":null,"dir":"Reference","previous_headings":"","what":"Broadband Activity Index — bbai","title":"Broadband Activity Index — bbai","text":"function processes audio signal detect broadband activity identifying 'clicks' based time-frame-wise (.e., column-wise) amplitude changes spectrogram. computes statistics related click height, variance, centroid frequency, can plot spectrogram detected clicks highlighted. function also classifies whether signal contains noise insect based variance centroid frequencies clicks.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bbai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Broadband Activity Index — bbai","text":"","code":"bbai(   wave,   channel = \"left\",   hpf = 0,   freq.res = 50,   cutoff = -60,   click.length = 10,   difference = 10,   gap.allowance = 2,   spectrogram = FALSE,   dark.plot = FALSE,   plot.title = NULL,   verbose = TRUE )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bbai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Broadband Activity Index — bbai","text":"wave Wave object containing audio signal analyzed. channel Character. Wave stereo want use one channel, pass either \"left\" \"right\" argument. want analyze mix channels, select \"mix\". NULL (default), results returned channel. hpf Numeric. High-pass filter. default (500 Hz) used always consistency unless signals interest threshold. freq.res Numeric. Frequency resolution Hz. value determines \"height\" frequency bin , therefore, window length used (sampling rate / frequency resolution). cutoff Numeric. amplitude threshold (dBFS) removing low-amplitude values spectrogram. Default -50. difference Numeric. maximum difference amplitude adjacent frequency bins considered part single 'click'. Default 20. gap.allowance Numeric. size gaps (frequency bins) allowed contiguous parts click. Default 2. Gaps larger value split clicks. spectrogram Logical. spectrogram highlighted clicks plotted? Default TRUE. dark.plot Logical. plot use dark theme (black background)? Default FALSE. plot.title Character. title plot, plot TRUE. Default NULL. verbose Logical. TRUE, details dynamic range printed console. click.height Numeric. minimum height (frequency bins) detected click kept. Default 10.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bbai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Broadband Activity Index — bbai","text":"tibble optional spectrogram.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bbai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Broadband Activity Index — bbai","text":"","code":"bbai(wave) #> Error: object 'wave' not found"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bbai_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate BBAI for all the Files in a Folder — bbai_folder","title":"Calculate BBAI for all the Files in a Folder — bbai_folder","text":"function processes sound signal detect broadband activity identifying 'clicks' based time-frame-wise (.e., column-wise) amplitude changes spectrogram. computes statistics related click height, variance, centroid frequency, can plot spectrogram detected clicks highlighted. function also classifies whether signal contains noise insect based variance centroid frequencies clicks.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bbai_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate BBAI for all the Files in a Folder — bbai_folder","text":"","code":"bbai_folder(   folder = NULL,   recursive = FALSE,   list = NULL,   start = 0,   end = 1,   unit = \"minutes\",   channel = \"each\",   hpf = 0,   freq.res = 50,   cutoff = -60,   click.length = 10,   difference = 10,   gap.allowance = 2,   spectrogram = FALSE,   dark.plot = FALSE,   plot.title = \"\",   verbose = FALSE,   output.csv = \"bbai_results.csv\",   n.cores = -1 )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bbai_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate BBAI for all the Files in a Folder — bbai_folder","text":"folder Character. path folder wave files analyze. recursive Logical. Whether search subfolders. Default TRUE. list optional list (subset) files folder analyze. provided, files outside list excluded. start numerical. start reading Wave. end numerical. end reading Wave. unit character. Unit measurement 'start' 'end'. Options 'samples', 'seconds', 'minutes', 'hours'. Default 'minutes'. channel Character. Wave stereo want use one channel, pass either \"left\" \"right\" argument. want analyze mix channels, select \"mix\". NULL (default), results returned channel. hpf Numeric. High-pass filter. default (500 Hz) used always consistency unless signals interest threshold. freq.res Numeric. Frequency resolution Hz. value determines \"height\" frequency bin , therefore, window length used (sampling rate / frequency resolution). cutoff Numeric. amplitude threshold (dBFS) removing low-amplitude values spectrogram. Default -50. difference Numeric. maximum difference amplitude adjacent frequency bins considered part single 'click'. Default 20. gap.allowance Numeric. size gaps (frequency bins) allowed contiguous parts click. Default 2. Gaps larger value split clicks. spectrogram Logical. spectrogram highlighted clicks plotted? Default TRUE. dark.plot Logical. plot use dark theme (black background)? Default FALSE. plot.title Character. title plot, plot TRUE. Default NULL. verbose Logical. TRUE, details dynamic range printed console. output.csv Character. Name csv file. Default \"bbai_results.csv\". n.cores Numeric. Number cores used parallel. Use -1 (Default) use one. click.height Numeric. minimum height (frequency bins) detected click kept. Default 10.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bbai_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate BBAI for all the Files in a Folder — bbai_folder","text":"tibble.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bbai_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate BBAI for all the Files in a Folder — bbai_folder","text":"","code":"if (FALSE) { # \\dontrun{ bbai_folder(path/to/folder) } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bi.html","id":null,"dir":"Reference","previous_headings":"","what":"Bioacoustic Index — bi","title":"Bioacoustic Index — bi","text":"Inspired \"Bioacoustic Index\" paper:Boelman NT, Asner GP, Hart PJ, Martin RE. 2007. Multi-trophic invasion resistance Hawaii: bioacoustics, field surveys, airborne remote sensing. Ecol Applications 17(8):2137-44. Based Matlab code provided NT Boelman. Boelman et al. 2007 used min.freq=2000, max.freq=8000, w.len=512. Several parts changed, particular log math, directly comparable original code paper.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bioacoustic Index — bi","text":"","code":"bi(   wave,   w.len = 512,   w.fun = \"hanning\",   min.freq = 2000,   max.freq = 8000,   norm.spec = FALSE,   noise.red = 0,   rm.offset = TRUE )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bioacoustic Index — bi","text":"wave object class Wave imported readWave function tuneR package. w.len window length compute spectrogram (.e., FFT window size). w.fun window function (filter handle spectral leakage); \"bartlett\", \"blackman\", \"flattop\", \"hamming\", \"hanning\", \"rectangle\". min.freq miminum frequency use calculating value, Hertz. Default = NA. max.freq maximum frequency use calculating value, Hertz. Default = NA (Nyquist). norm.spec logical; TRUE, spectrogram normalized, scaled maximum value (recommended normalized spectrograms different SNR comparable). noise.red numeric; controls application noise reduction. set 1, noise reduction applied row subtracting median amplitude values. set 2, noise reduction applied column similarly. set 0 (Default), noise reduction applied. rm.offset logical; set TRUE, function remove DC offset computing ADI. Default = TRUE.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bioacoustic Index — bi","text":"tibble (data frame) BI values channel (stereo), metadata, parameters used calculation.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bioacoustic Index — bi","text":"","code":"bi(tropicalsound) #> Error: object 'tropicalsound' not found"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bi_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Bioacoustic Index - folder input — bi_folder","title":"Bioacoustic Index - folder input — bi_folder","text":"Inspired \"Bioacoustic Index\" paper:Boelman NT, Asner GP, Hart PJ, Martin RE. 2007. Multi-trophic invasion resistance Hawaii: bioacoustics, field surveys, airborne remote sensing. Ecol Applications 17(8):2137-44. Based Matlab code provided NT Boelman. Boelman et al. 2007 used min.freq=2000, max.freq=8000, w.len=512. Several parts changed, particular log math, directly comparable original code paper.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bi_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bioacoustic Index - folder input — bi_folder","text":"","code":"bi_folder(   folder = NULL,   recursive = FALSE,   start = 0,   end = 1,   unit = \"minutes\",   list = NULL,   save.csv = TRUE,   csv.name = \"bi_results.csv\",   w.len = 512,   w.fun = \"hanning\",   min.freq = 2000,   max.freq = 8000,   norm.spec = FALSE,   noise.red = 0,   rm.offset = TRUE,   n.cores = -1 )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bi_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bioacoustic Index - folder input — bi_folder","text":"folder path folder audio files import. recursive Logical. Whether search subfolders. Default TRUE. start numerical. start reading Wave. end numerical. end reading Wave. unit character. Unit measurement 'start' 'end'. Options 'samples', 'seconds', 'minutes', 'hours'. Default 'minutes'. list optional list (subset) files folder analyze. provided, files outside list excluded. save.csv logical. Whether save csv working directory. csv.name character vector. 'save.csv' TRUE, optionally provide file name. w.len window length compute spectrogram (.e., FFT window size). w.fun window function (filter handle spectral leakage); \"bartlett\", \"blackman\", \"flattop\", \"hamming\", \"hanning\", \"rectangle\". min.freq miminum frequency use calculating value, Hertz. Default = NA. max.freq maximum frequency use calculating value, Hertz. Default = NA (Nyquist). norm.spec logical; TRUE, spectrogram normalized, scaled maximum value (recommended normalized spectrograms different SNR comparable). noise.red numeric; controls application noise reduction. set 1, noise reduction applied row subtracting median amplitude values. set 2, noise reduction applied column similarly. set 0 (Default), noise reduction applied. rm.offset logical; set TRUE, function remove DC offset computing ADI. Default = TRUE. n.cores number cores use parallel processing. Use n.cores = -1 use one core. Default NULL (single-core processing).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bi_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bioacoustic Index - folder input — bi_folder","text":"tibble (data frame) BI values channel (stereo), metadata, parameters used calculation.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bi_folder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bioacoustic Index - folder input — bi_folder","text":"uses parallel processing one available cores. Optimized facilitate working folder audio files importing R. Modifications Francisco Rivas (frivasfu@purdue.edu // fcorivasf@gmail.com) April 2024","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/bi_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bioacoustic Index - folder input — bi_folder","text":"","code":"bi_folder(path/to/folder) #> Working on it... #> Error: object 'path' not found"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/diel_spectrogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Diel Spectrogram from multiple Audio Recordings — diel_spectrogram","title":"Generate a Diel Spectrogram from multiple Audio Recordings — diel_spectrogram","text":"Creates spectrogram visualization daily acoustic patterns using multiple recordings, options noise floor clipping parallel processing. Specifically, takes variance acoustic energy frequency bin recording merges resulting vectors summary spectrogram.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/diel_spectrogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Diel Spectrogram from multiple Audio Recordings — diel_spectrogram","text":"","code":"diel_spectrogram(   folder = NULL,   recursive = TRUE,   list = NULL,   title = \"\",   freq_res = 50,   n.cores = -1,   cutoff = -100,   max_amp = -10,   plot = TRUE,   save_plot = TRUE,   save_to = \"./diel_plots\",   dc_on = NULL,   dc_off = NULL,   target_dates = NULL )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/diel_spectrogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Diel Spectrogram from multiple Audio Recordings — diel_spectrogram","text":"folder Path folder containing WAV files (default: current working directory). recursive Logical. Whether search files subfolders. Default: TRUE. list list WAV files parse. waves must working directory (default: NULL). title Character string. Plot title (default: empty). freq_res Frequency resolution Hz FFT (default: 50) n.cores Number cores parallel processing (-1 available cores) cutoff Minimum dBFS value (noise floor). Values clipped (default: -100) max_amp Maximum dBFS value represented color scale. plot Whether generate plot (default: TRUE) save_plot Logical. Whether save plot save_to Character. save_plot = TRUE, provide path folder file stored. path provided, new folder \"diel_plots\" created current working directory (default) save exported files. dc_on Number minutes recorded \"\". Used identify expected number files per day. dc_off Number minutes recorded \"\". Used identify expected number files per day. target_dates Either single date multiple dates format \"YYYY-MM-DD\" analyzed. NULL (default), dates folder parsed. provide range, see Details.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/diel_spectrogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Diel Spectrogram from multiple Audio Recordings — diel_spectrogram","text":"list containing: plot - ggplot2 spectrogram object spectral_data - Wide-format spectral data (freq bins × recordings) plot_data - Long-format data plotting file_metadata - File information extracted metadata overall_range - dBFS range data","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/diel_spectrogram.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a Diel Spectrogram from multiple Audio Recordings — diel_spectrogram","text":"function parses files folder list groups date, creating single diel spectrogram . parse subset range dates contained folder, use seq(). Example: target_dates = seq(.Date(\"2022-10-20\"), .Date(\"2022-10-25), \"days\")","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/dynamicity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Soundscape Dynamicity — dynamicity","title":"Calculate Soundscape Dynamicity — dynamicity","text":"Quantifies temporal variability acoustic energy across frequency bins comparing mean power spectra (MPS) consecutive segments audio recording. Useful identifying periods rapid acoustic change soundscapes.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/dynamicity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Soundscape Dynamicity — dynamicity","text":"","code":"dynamicity(wave, fun = \"mean\", segment_l = 5, freq_res = 50, plot = TRUE)"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/dynamicity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Soundscape Dynamicity — dynamicity","text":"wave Wave object (tuneR package) containing audio data. fun Function apply spectral calculation (\"mean\", \"var\", etc.). Passed seewave::meanspec(FUN). segment_l Length (seconds) analysis segment. Longer segments provide better frequency resolution fewer temporal comparisons (default: 5s). freq_res Frequency resolution (Hz) spectral analysis. Higher values increase frequency binning (default: 50Hz). plot Logical. TRUE (default), generates heatmap spectral changes.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/dynamicity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Soundscape Dynamicity — dynamicity","text":"list components: dynamicity: Scalar metric overall acoustic variability (mean ΔMPS across bins). delta_mps: Matrix absolute MPS differences segments (frequency bins × time). dynamicity_vector: Frequency-specific variability (sum ΔMPS per bin). frequency: Vector frequency bins (kHz). time: Vector segment mid-point times (s).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/dynamicity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Soundscape Dynamicity — dynamicity","text":"function works : Dividing audio equal-length segments. Calculating mean power spectra (MPS) segment. Computing absolute differences MPS consecutive segments. Summarizing differences \"dynamicity\" metric.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/dynamicity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Soundscape Dynamicity — dynamicity","text":"","code":"if (FALSE) { # \\dontrun{ library(tuneR) data(tico) dyn <- dynamicity(tico, segment_l = 1, freq_res = 100) } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fadi.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequency-dependent Acoustic Diversity Index — fadi","title":"Frequency-dependent Acoustic Diversity Index — fadi","text":"Frequency-dependent Acoustic Diversity Index Xu et al. (2023) obtains floating noise profile calculating Acoustic Diversity Index use normalized spectrogram. Alternatively can take noise sample reduce noise analyzed files.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fadi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequency-dependent Acoustic Diversity Index — fadi","text":"","code":"fadi(   soundfile,   noise_file = NULL,   NEM = 2,   min_freq = 200,   max_freq = 10000,   threshold_fixed = -50,   freq_step = 1000,   gamma = 13,   props = TRUE )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fadi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequency-dependent Acoustic Diversity Index — fadi","text":"soundfile wave object imported readWave(). noise_file R object class Wave containing noise-information needed. Default = NULL. NEM Numeric. Options 1 2. NEM = 1, floating thresholds estimated based noise_file. NEM = 2, floating thresholds calculated based sound file using automatic noise level estimation method (median row spectrogram). Default = 2. min_freq Minimum frequency Hertz calculating global threshold. Default = 200. max_freq Maximum frequency Hertz calculating FADI value. Default = 10000. threshold_fixed negative number dB calculating global threshold. Default = −50. freq_step Bandwidth frequency band, Hertz. Default = 1000. gamma positive number dB calculating floating thresholds. Default = 13. props Logical; TRUE, energy proportion values frequency ban channel added output tibble. Default = TRUE.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fadi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequency-dependent Acoustic Diversity Index — fadi","text":"tibble FADI value per channel, energy proportions, metadata, parameters used.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fadi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Frequency-dependent Acoustic Diversity Index — fadi","text":"Modified version Frequency-dependent Acoustic Diversity Index Xu et al. (2023).FADI introduced : https://www.sciencedirect.com/science/article/pii/S1470160X23010828. version returns wide format (one row per audio file) tibble output instead nested list. see original version paper, use frequency_dependent_acoustic_diversity() function.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fadi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frequency-dependent Acoustic Diversity Index — fadi","text":"","code":"fadi(tropicalsound) #> Error: object 'tropicalsound' not found"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fadi_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequency-dependent Acoustic Diversity Index - folder input — fadi_folder","title":"Frequency-dependent Acoustic Diversity Index - folder input — fadi_folder","text":"Frequency-dependent Acoustic Diversity Index Xu et al. (2023) obtains floating noise profile calculating Acoustic Diversity Index use normalized spectrogram. Alternatively can take noise sample reduce noise analyzed files.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fadi_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequency-dependent Acoustic Diversity Index - folder input — fadi_folder","text":"","code":"fadi_folder(   folder = NULL,   recursive = recursive,   list = NULL,   start = 0,   end = 1,   unit = \"minutes\",   save_csv = TRUE,   csv_name = \"fadi_results.csv\",   noise_file = NULL,   NEM = 2,   min_freq = 200,   max_freq = 10000,   threshold_fixed = -50,   freq_step = 1000,   gamma = 13,   props = FALSE,   n.cores = -1 )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fadi_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequency-dependent Acoustic Diversity Index - folder input — fadi_folder","text":"folder path folder audio files import. recursive Logical. Whether search subfolders. Default TRUE. list optional list (subset) files folder analyze. provided, files outside list excluded. start numerical. start reading Wave. end numerical. end reading Wave. unit character. Unit measurement 'start' 'end'. Options 'samples', 'seconds', 'minutes', 'hours'. Default 'minutes'. save_csv logical. Whether save csv working directory. csv_name character vector. 'save_csv' TRUE, optionally provide file name. noise_file R object class Wave containing noise-information needed. Default = NULL. NEM Numeric. Options 1 2. NEM = 1, floating thresholds estimated based noise_file. NEM = 2, floating thresholds calculated based sound file using automatic noise level estimation method (median row spectrogram). Default = 2. min_freq Minimum frequency Hertz calculating global threshold. Default = 200. max_freq Maximum frequency Hertz calculating FADI value. Default = 10000. threshold_fixed negative number dB calculating global threshold. Default = −50. freq_step Bandwidth frequency band, Hertz. Default = 1000. gamma positive number dB calculating floating thresholds. Default = 13. props Logical; TRUE, energy proportion values frequency band channel added output tibble. Default = TRUE. n.cores number cores use parallel processing. Use n.cores = -1 use one core. Default NULL (single-core processing).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fadi_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequency-dependent Acoustic Diversity Index - folder input — fadi_folder","text":"tibble FADI value per channel, energy proportions, metadata, parameters used.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fadi_folder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Frequency-dependent Acoustic Diversity Index - folder input — fadi_folder","text":"Modified version Frequency-dependent Acoustic Diversity Index Xu et al. (2023). FADI introduced : https://www.sciencedirect.com/science/article/pii/S1470160X23010828. version returns wide format (one row per audio file) tibble output instead nested list. see original version paper, use frequency_dependent_acoustic_diversity() function.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fadi_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frequency-dependent Acoustic Diversity Index - folder input — fadi_folder","text":"","code":"fadi_folder(folder=pathB, \"fadi_hydro_b.csv\") #> Working on it... #> Error: object 'pathB' not found"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fci.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequency Cover Indices (FCI) — fci","title":"Frequency Cover Indices (FCI) — fci","text":"function analyzes spectral occupancy 'low', 'mid', 'high', 'ultra' frequency bands, limits defined user. calculates proportion cells frequency band exceeding specified dB cutoff optionally plots binary spectrogram frequency bands delimited.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequency Cover Indices (FCI) — fci","text":"","code":"fci(   wave,   channel = \"left\",   hpf = 0,   cutoff = -60,   freq.res = 50,   spectrogram = FALSE,   ggplot = FALSE,   plot.title = \"Frequency Cover Analysis\",   sound.color = \"#045E10\",   lf.min = 0,   lf.max = 1500,   mf.min = 1500,   mf.max = 8000,   hf.min = 8000,   hf.max = 18000,   uf.min = 18000,   uf.max = 24000,   verbose = FALSE )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequency Cover Indices (FCI) — fci","text":"wave Wave object containing audio data analyzed. channel Character. Wave stereo, select channel analyze. Options \"left\", \"right\", \"mix\", combines L R channels single mono Wave. Default \"left\". cutoff Numeric. amplitude cutoff dB frequency bins considered active. Default 70 dB. freq.res Numeric. frequency resolution used selecting window length FFT. spectrogram Logical. TRUE, function generate display plot binary spectrogram frequency bands marked. Default TRUE. ggplot Logical. TRUE, plot output ggplot object. FALSE (default), base plot function used (faster rendering). plot.title Character. optional title plot. lf.min Numeric. minimum frequency (Hz) low-frequency band. Default 1 Hz. lf.max Numeric. maximum frequency (Hz) low-frequency band. Default 2000 Hz. mf.min Numeric. minimum frequency (Hz) mid-frequency band. Default 2000 Hz. mf.max Numeric. maximum frequency (Hz) mid-frequency band. Default 12000 Hz. hf.min Numeric. minimum frequency (Hz) high-frequency band. Default 12000 Hz. hf.max Numeric. maximum frequency (Hz) high-frequency band. Default 22000 Hz. verbose Logical. TRUE, details dynamic range printed console.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequency Cover Indices (FCI) — fci","text":"tibble optional spectrogram.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frequency Cover Indices (FCI) — fci","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming 'wave' is a Wave object results <- fci(wave, cutoff = 65, freq.res = 100,  spectrogram = TRUE) print(results) } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fci_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequency Cover Indices on Multiple WAV Files in a Folder — fci_folder","title":"Frequency Cover Indices on Multiple WAV Files in a Folder — fci_folder","text":"function performs frequency cover indices (FCI) WAV files within specified folder. processes sound file parallel (specified) saves results CSV file.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fci_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequency Cover Indices on Multiple WAV Files in a Folder — fci_folder","text":"","code":"fci_folder(   folder = NULL,   recursive = FALSE,   list = NULL,   start = 0,   end = 1,   unit = \"minutes\",   output.csv = \"fci_results.csv\",   channel = \"each\",   hpf = 0,   cutoff = -60,   freq.res = 50,   spectrogram = FALSE,   ggplot = FALSE,   plot.title = \"Frequency Cover Analysis\",   sound.color = \"#045E10\",   lf.min = 0,   lf.max = 1500,   mf.min = 1500,   mf.max = 8000,   hf.min = 8000,   hf.max = 18000,   uf.min = 18000,   uf.max = 24000,   n.cores = -1 )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fci_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequency Cover Indices on Multiple WAV Files in a Folder — fci_folder","text":"folder folder containing WAV files analyze. recursive Logical. Whether search subfolders. Default TRUE. list optional list (subset) files folder analyze. provided, files outside list excluded. start numerical. start reading Wave. end numerical. end reading Wave. unit character. Unit measurement 'start' 'end'. Options 'samples', 'seconds', 'minutes', 'hours'. Default 'minutes'. output.csv name CSV file results saved. Default \"frequency_cover_results.csv\". channel channel analyze: 'left', 'right', 'mix' (combine ), '' (process left right channels separately). Default 'left'. hpf High-pass filter cutoff frequency Hz. 0, high-pass filter applied. Default 0. cutoff amplitude threshold (dB) frequencies considered inactive. Default -60. freq.res Frequency resolution spectrogram Hz. Default 100. ggplot Logical. Whether use ggplot2 plotting (plot TRUE). Default FALSE. plot.title Title plot plotting enabled. Default \"Frequency Cover Analysis\". sound.color color use active frequencies plot. Default \"#045E10\" (dark green shade). lf.min minimum frequency (Hz) low-frequency band. Default 0. lf.max maximum frequency (Hz) low-frequency band. Default 1500. mf.min minimum frequency (Hz) mid-frequency band. Default 1500. mf.max maximum frequency (Hz) mid-frequency band. Default 8000. hf.min minimum frequency (Hz) high-frequency band. Default 8000. hf.max maximum frequency (Hz) high-frequency band. Default 18000. uf.min minimum frequency (Hz) ultra-high-frequency band. Default 18000. uf.max maximum frequency (Hz) ultra-high-frequency band. Default 24000. n.cores number cores use parallel processing. Use n.cores = -1 use one core. Default NULL (single-core processing). plot Logical. Whether generate plots file. Default FALSE.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fci_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequency Cover Indices on Multiple WAV Files in a Folder — fci_folder","text":"tibble containing frequency cover analysis results file.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/fci_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frequency Cover Indices on Multiple WAV Files in a Folder — fci_folder","text":"","code":"if (FALSE) { # \\dontrun{ # Run frequency cover analysis on all WAV files in the folder \"sound_files\" fci_folder(\"sound_files\", output.csv = \"results.csv\", channel = \"left\", n.cores = 4) } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/first_recording_hour.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsample a dataset with only the first recording in each hour — first_recording_hour","title":"Subsample a dataset with only the first recording in each hour — first_recording_hour","text":"Subsample dataset first recording hour","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/first_recording_hour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsample a dataset with only the first recording in each hour — first_recording_hour","text":"","code":"first_recording_hour(data)"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/first_recording_hour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsample a dataset with only the first recording in each hour — first_recording_hour","text":"data data frame tibble","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/first_recording_hour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsample a dataset with only the first recording in each hour — first_recording_hour","text":"data frame subsetted observations (1 per hour).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/first_recording_hour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsample a dataset with only the first recording in each hour — first_recording_hour","text":"","code":"first_recording_hour(dataframe) #> Error: object 'dataframe' not found"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/get_fft_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate FFT Parameters — get_fft_params","title":"Calculate FFT Parameters — get_fft_params","text":"function calculates time frequency resolution based provided sampling rate either window length, time resolution, frequency resolution. Depending parameters given, calculates returns appropriate values others.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/get_fft_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate FFT Parameters — get_fft_params","text":"","code":"get_fft_params(   samp.rate = NULL,   win.length = NULL,   time.res = NULL,   freq.res = NULL )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/get_fft_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate FFT Parameters — get_fft_params","text":"samp.rate Numeric. sampling rate audio signal Hz. win.length Numeric. window length samples. Can NULL time frequency resolution provided. time.res Numeric. time resolution seconds. Can NULL window length frequency resolution provided. freq.res Numeric. frequency resolution Hz. Can NULL window length time resolution provided.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/get_fft_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate FFT Parameters — get_fft_params","text":"Prints calculated time frequency resolution, window length either time frequency resolution depending provided inputs.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/get_fft_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate FFT Parameters — get_fft_params","text":"","code":"get_fft_params(samp.rate = 44100, win.length = 1024) #>  Time resolution: 0.023 s #>  Frequency resolution: 43.066 Hz get_fft_params(samp.rate = 44100, time.res = 0.023) #>  Window length: 1014.3 samples #>  Frequency resolution: 43.478 Hz get_fft_params(samp.rate = 44100, freq.res = 43) #>  Window length: 1025.581 samples #>  Time resolution: 0.023 s"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/harmonize_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonize ","title":"Harmonize ","text":"Harmonize \"old\" soundecology2 output new SoundEcology2 table format","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/harmonize_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonize ","text":"","code":"harmonize_index(data.frame, original.index = NULL)"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/harmonize_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonize ","text":"data.frame data frame containing results soundecology2 original.index Character. name 'old' index, e.g., \"adi_original\"","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/harmonize_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonize ","text":"new data frame harmonized columns.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/harmonize_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harmonize ","text":"","code":"harmonize_index(ndsi_original, \"ndsi_original\") #> Error: object 'ndsi_original' not found"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Import and Merge CSV Files Matching a Pattern — import_indices","title":"Import and Merge CSV Files Matching a Pattern — import_indices","text":"function reads CSV files specified folder (current working directory, folder provided) match given pattern. selects predefined set columns CSV merges files single data frame.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import and Merge CSV Files Matching a Pattern — import_indices","text":"","code":"import_indices(folder = NULL, pattern = \"_results.csv\")"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import and Merge CSV Files Matching a Pattern — import_indices","text":"folder string specifying folder path CSV files located. NULL, function uses current working directory. pattern string representing file name pattern search (default \"_results.csv\"). regular expression matches files imported.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import and Merge CSV Files Matching a Pattern — import_indices","text":"data frame containing merged data CSV files, following columns: file_name, sensor_id, datetime, date, hour, index, value_l, value_r, value_avg.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import and Merge CSV Files Matching a Pattern — import_indices","text":"","code":"if (FALSE) { # \\dontrun{ # Example: Import all CSV files matching the pattern \"_results.csv\" from a folder folder_path <- \"path/to/folder\" combined_data <- import_indices(folder = folder_path, pattern = \"_results.csv\")  # Example: Import from the current working directory with default pattern combined_data <- import_indices() } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_kaleidoscope.html","id":null,"dir":"Reference","previous_headings":"","what":"Import tidy dataset from Kaleidoscope — import_kaleidoscope","title":"Import tidy dataset from Kaleidoscope — import_kaleidoscope","text":"Import tidy dataset Kaleidoscope","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_kaleidoscope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import tidy dataset from Kaleidoscope — import_kaleidoscope","text":"","code":"import_kaleidoscope(file)"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_kaleidoscope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import tidy dataset from Kaleidoscope — import_kaleidoscope","text":"data excelfile","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_kaleidoscope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import tidy dataset from Kaleidoscope — import_kaleidoscope","text":"data frame following columns 'file_name', 'sensor_id', 'datetime', 'date', 'hour', 'value_l', 'value_r', 'value_avg'","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_kaleidoscope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import tidy dataset from Kaleidoscope — import_kaleidoscope","text":"","code":"import_kaleidoscope(data) #> Error in as.character(text): cannot coerce type 'closure' to vector of type 'character'"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_kaleidoscope_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch Import and Process Kaleidoscope Files in Parallel — import_kaleidoscope_batch","title":"Batch Import and Process Kaleidoscope Files in Parallel — import_kaleidoscope_batch","text":"function imports processes multiple Excel files (.xlsx .xls) specified directory file list using import_kaleidoscope function. function operates parallel speed process utilizing multiple cores. processed data file row-bound single data frame, new column (specified user) added constant value.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_kaleidoscope_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch Import and Process Kaleidoscope Files in Parallel — import_kaleidoscope_batch","text":"","code":"import_kaleidoscope_batch(   file_list = NULL,   new.col.name,   new.col.value,   path = getwd(),   cores = NULL )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_kaleidoscope_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch Import and Process Kaleidoscope Files in Parallel — import_kaleidoscope_batch","text":"file_list list Excel files imported. NULL, function search Excel files specified path (default working directory). new.col.name name new column added output data frame. new.col.value value assigned new column rows. path path directory containing Excel files. Default working directory. cores number CPU cores use parallel processing. NULL, function use one available core.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_kaleidoscope_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch Import and Process Kaleidoscope Files in Parallel — import_kaleidoscope_batch","text":"data frame combining imported processed data Excel files, new column added.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_kaleidoscope_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch Import and Process Kaleidoscope Files in Parallel — import_kaleidoscope_batch","text":"","code":"# Assuming there are Excel files in the working directory: result <- import_kaleidoscope_batch(new.col.name = \"treatment\", new.col.value = \"test\") #> Loading required package: foreach #> Loading required package: iterators #> Error in import_kaleidoscope_batch(new.col.name = \"treatment\", new.col.value = \"test\"): No Excel files found in the specified directory.  # Specifying a list of files and a custom path: file_list <- c(\"file1.xlsx\", \"file2.xlsx\") result <- import_kaleidoscope_batch(file_list = file_list, new.col.name = \"batch\", new.col.value = \"batch_1\", path = \"path/to/files\") #> Error in {    df <- import_kaleidoscope(file)    df[[new.col.name]] <- new.col.value    return(df)}: task 1 failed - \"`path` does not exist: 'file1.xlsx'\""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_stereo_mix.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a Stereo Wave File as Mono and Optionally Remove DC Offset — import_stereo_mix","title":"Import a Stereo Wave File as Mono and Optionally Remove DC Offset — import_stereo_mix","text":"function reads stereo wave file, converts mono averaging channels, optionally removes DC offset audio signal. removal DC offset controlled remove.dc.parameter. function uses tuneR package read convert wave file seewave package remove DC offset.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_stereo_mix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a Stereo Wave File as Mono and Optionally Remove DC Offset — import_stereo_mix","text":"","code":"import_stereo_mix(audio.file, remove.dc.off = TRUE)"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_stereo_mix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a Stereo Wave File as Mono and Optionally Remove DC Offset — import_stereo_mix","text":"audio.file string specifying path wave file. remove.dc.logical parameter; TRUE, DC offset removed wave object.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_stereo_mix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a Stereo Wave File as Mono and Optionally Remove DC Offset — import_stereo_mix","text":"Returns wave object processed based input parameters.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/import_stereo_mix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a Stereo Wave File as Mono and Optionally Remove DC Offset — import_stereo_mix","text":"","code":"# Import a wave file as mono with DC offset removal wave <- import.as.mono(\"path/to/your/audiofile.wav\") #> Error in import.as.mono(\"path/to/your/audiofile.wav\"): could not find function \"import.as.mono\""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/index_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Create time series analysis and visualization for acoustic index data — index_ts","title":"Create time series analysis and visualization for acoustic index data — index_ts","text":"function processes acoustic index data, summarizes day/week/month, creates interactive visualizations optional smoothing. handles datetime parsing filenames, data summarization different temporal resolutions, generates plots range ribbons average values.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/index_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create time series analysis and visualization for acoustic index data — index_ts","text":"","code":"index_ts(   data,   index_name = \"adi\",   extra_title = \"\",   start = NULL,   end = NULL,   span = 0.3,   summarize_by = \"day\" )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/index_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create time series analysis and visualization for acoustic index data — index_ts","text":"data data frame containing acoustic index data. Must include columns: 'index', 'file_name', 'value_avg'. index_name name index analyze (default: \"adi\"). Used plot labels. extra_title Additional text include plot title (default: \"\"). start Optional start date filtering data (format: \"YYYY-MM-DD\"). end Optional end date filtering data (format: \"YYYY-MM-DD\"). span Span parameter LOESS smoothing (default: 0.3). summarize_by Temporal resolution main plot: \"day\", \"week\", \"month\" (default: \"day\").","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/index_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create time series analysis and visualization for acoustic index data — index_ts","text":"list containing: daily_tibble: Data summarized day weekly_tibble: Data summarized week monthly_tibble: Data summarized month plot: Interactive plotly visualization time series","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/index_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create time series analysis and visualization for acoustic index data — index_ts","text":"function performs following steps: Extracts datetime information filenames Parses datetime using multiple possible formats Summarizes data daily, weekly, monthly levels Filters data based start/end dates provided Creates interactive plot range ribbons average line Optionally adds LOESS smoothing enough data points exist","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/index_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create time series analysis and visualization for acoustic index data — index_ts","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage result <- index_ts(acoustic_data)  # With custom parameters result <- index_ts(acoustic_data,                    index_name = \"ndsi\",                   extra_title = \"Forest Site A\",                   start = \"2023-01-01\",                   end = \"2023-06-30\",                   summarize_by = \"week\") } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/indices_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of Acoustic Indices — indices_summary","title":"Summary of Acoustic Indices — indices_summary","text":"function processes summarizes acoustic indices data frame. formats data based origin, either \"kaleidoscope\" \"soundecology2\", computes summary statistics mean, median, mode, minimum, maximum values acoustic index. Additionally, identifies recording files closest summary statistics.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/indices_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of Acoustic Indices — indices_summary","text":"","code":"indices_summary(df, origin = \"soundecology2\")"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/indices_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of Acoustic Indices — indices_summary","text":"df data frame containing acoustic indices. Expected column names depend origin parameter. \"kaleidoscope\" data, expected columns include .FILE, CHANNEL, several acoustic indices (ndsi, cent, etc.). \"soundecology2\" data, columns include file_name, sensor_id, datetime. origin character string specifying source data. Options \"kaleidoscope\" \"soundecology2\". Default \"kaleidoscope\".","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/indices_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of Acoustic Indices — indices_summary","text":"data frame containing summary statistics (mean, median, mode, max, min) acoustic index, associated recording file closest statistic.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/indices_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of Acoustic Indices — indices_summary","text":"","code":"# Example with kaleidoscope data df <- data.frame(in.file = c(\"unit1_20220101_123000.wav\", \"unit2_20220101_124000.wav\"),                  channel = c(0, 1), ndsi = c(0.3, 0.7), cent = c(200, 300)) indices_summary(df, origin = \"kaleidoscope\") #> Error in dplyr::select(df, -offset): Can't select columns that don't exist. #> ✖ Column `offset` doesn't exist.  # Example with soundecology2 data df2 <- data.frame(file_name = c(\"unit1_2022-01-01 12:30:00\", \"unit2_2022-01-01 12:40:00\"),                   sensor_id = c(\"unit1\", \"unit2\"), datetime = c(\"2022-01-01 12:30:00\", \"2022-01-01 12:40:00\")) indices_summary(df2, origin = \"soundecology2\") #> Error in dplyr::group_by(df, sensor_id, channel, index): Must group by variables found in `.data`. #> Column `channel` is not found. #> Column `index` is not found."},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/list_csvs.html","id":null,"dir":"Reference","previous_headings":"","what":"List the CSV files in a directory — list_csvs","title":"List the CSV files in a directory — list_csvs","text":"List CSV files directory","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/list_csvs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the CSV files in a directory — list_csvs","text":"","code":"list_csvs(folder = NULL, recursive = TRUE)"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/list_csvs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the CSV files in a directory — list_csvs","text":"folder Directory search. NULL (default), current working directory used. recursive Logical. Whether search subfolders. Default TRUE.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/list_csvs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the CSV files in a directory — list_csvs","text":"list csv files chosen directory.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/list_csvs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the CSV files in a directory — list_csvs","text":"","code":"if (FALSE) { # \\dontrun{ list_csvs() } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/list_waves.html","id":null,"dir":"Reference","previous_headings":"","what":"List wave files in a directory — list_waves","title":"List wave files in a directory — list_waves","text":"List wave files directory","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/list_waves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List wave files in a directory — list_waves","text":"","code":"list_waves(folder = NULL, recursive = FALSE)"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/list_waves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List wave files in a directory — list_waves","text":"folder Character. path folder WAV files stored. recursive Logical. Whether search subfolders. Default FALSE.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/list_waves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List wave files in a directory — list_waves","text":"list wave files","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/list_waves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List wave files in a directory — list_waves","text":"","code":"if (FALSE) { # \\dontrun{ list_waves(folder) } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/mean_spectrum_flip.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Mean Spectrum with Flipped Axes — mean_spectrum_flip","title":"Plot a Mean Spectrum with Flipped Axes — mean_spectrum_flip","text":"function wrapper around meanspec function seewave package. calculates mean spectrum wave object, flips axes amplitude x-axis frequency y-axis, fills area curve black color.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/mean_spectrum_flip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Mean Spectrum with Flipped Axes — mean_spectrum_flip","text":"","code":"mean_spectrum_flip(   wave,   freq.res = 50,   normalize = FALSE,   PSD = FALSE,   PMF = FALSE,   plot.title = \"\",   verbose = TRUE )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/mean_spectrum_flip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Mean Spectrum with Flipped Axes — mean_spectrum_flip","text":"wave wave object tuneR seewave package, representing audio signal analyzed. freq.res numeric value representing desired frequency resolution. controls window length (wl) used meanspec function. Default 50. normalize Logical. spectrum normalized (.e., expressed decibels)? Passed norm argument meanspec. Default FALSE. PSD Logical. TRUE, compute power spectral density (PSD). Default FALSE. PMF Logical. TRUE, compute probability mass function (PMF) spectrum. Default FALSE. plot.title string plot's title. Default empty string (\"\"). verbose Logical. TRUE, print information window length number frequency bins. Default TRUE.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/mean_spectrum_flip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Mean Spectrum with Flipped Axes — mean_spectrum_flip","text":"function returns plot mean spectrum flipped axes (amplitude x-axis frequency y-axis) area curve filled black.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/mean_spectrum_flip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a Mean Spectrum with Flipped Axes — mean_spectrum_flip","text":"function computes mean spectrum using meanspec function seewave package. calculates window length (wl) based provided frequency resolution, ensuring even number. function plots amplitude x-axis frequency y-axis, filled black area curve.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/mean_spectrum_flip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Mean Spectrum with Flipped Axes — mean_spectrum_flip","text":"","code":"if (FALSE) { # \\dontrun{   # Load example sound data   data(tico)   # Plot the mean spectrum with flipped axes   mean_spectrum_flip(tico, freq.res = 100, normalize = TRUE, plot.title = \"Flipped Mean Spectrum\") } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/merge_index_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Index Results from CSV Files — merge_index_results","title":"Merge Index Results from CSV Files — merge_index_results","text":"function takes folder path, reads CSV files folder match pattern \"*results.csv\", merges single data frame. keeps relevant columns: file_name, sensor_id, datetime, date, hour, index, value_avg.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/merge_index_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Index Results from CSV Files — merge_index_results","text":"","code":"merge_index_results(folder_path)"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/merge_index_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Index Results from CSV Files — merge_index_results","text":"folder_path character string specifying folder containing CSV files merged.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/merge_index_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Index Results from CSV Files — merge_index_results","text":"data frame merged contents CSV files, containing specified columns.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/merge_index_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Index Results from CSV Files — merge_index_results","text":"","code":"if (FALSE) { # \\dontrun{   # Merge CSV files in the specified folder   merged_data <- merge_index_results(\"/path/to/csv/folder\") } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/merge_se2_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge CSV outputs of several indices calculated with SoundEcology2 — merge_se2_indices","title":"Merge CSV outputs of several indices calculated with SoundEcology2 — merge_se2_indices","text":"Merge CSV outputs several indices calculated SoundEcology2","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/merge_se2_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge CSV outputs of several indices calculated with SoundEcology2 — merge_se2_indices","text":"","code":"merge_se2_indices(folder_path = NULL, recursive = TRUE)"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/merge_se2_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge CSV outputs of several indices calculated with SoundEcology2 — merge_se2_indices","text":"folder_path character. path folder containing csv files \"results.csv\" suffix recursive logical. TRUE, looks csv files subfolders.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/merge_se2_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge CSV outputs of several indices calculated with SoundEcology2 — merge_se2_indices","text":"tibble merged tables different indices.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/merge_se2_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge CSV outputs of several indices calculated with SoundEcology2 — merge_se2_indices","text":"","code":"if (FALSE) { # \\dontrun{ indices_all <- merge_se2_indices(\"path_to_folder\", recursive = TRUE) } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/nbai.html","id":null,"dir":"Reference","previous_headings":"","what":"Narrow-Band Activity Index — nbai","title":"Narrow-Band Activity Index — nbai","text":"index describes relative amount narrow-band persistent sound activity, like Cicadas Orthopterans. index can used evaluate insect activity influence soundscape metrics (e.g., summary acoustic indices).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/nbai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Narrow-Band Activity Index — nbai","text":"","code":"nbai(   wave,   channel = \"left\",   hpf = 250,   freq.res = 50,   cutoff = -60,   activity.cutoff = 10,   spectrogram = FALSE,   dark.plot = TRUE,   plot.title = deparse(substitute(wave)),   verbose = TRUE )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/nbai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Narrow-Band Activity Index — nbai","text":"wave Wave object channel Character. Options \"left\", \"right\", \"mix\", \"\". \"mix\" option creates temporary mono file mix channels calculating index. Default \"left\". hpf Numeric. High-pass filter. default (500 Hz) used always consistency unless signals interest threshold. freq.res Numeric. Frequency resolution Hz. value determines \"height\" frequency bin , therefore, window length used (sampling rate / frequency resolution). cutoff Numeric. Cutoff threshold defining sounds analyzed, dBFS. activity.cutoff Numeric. Cutoff percent activity. frequency bands active equal percentage considered \"active\" active band statistics. spectrogram Logical. Whether plot binary spectrogram used analysis. Allowed Wave mono one channel selected stereo file. dark.plot Logical. true (default) binary spectrogram black background. verbose Logical. TRUE, details dynamic range printed console.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/nbai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Narrow-Band Activity Index — nbai","text":"list containing: 1) binary spectrogram (mono), 2) tibble Narrow-Band Activity Index (NBI) summary statistics, 3) tibble NBI spectral, number rows equals number frequency bins analysis.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/nbai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Narrow-Band Activity Index — nbai","text":"","code":"nbai(wave, channel = 'left', plot = TRUE, verbose = TRUE) #> Error: object 'wave' not found"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/nbai_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Narrow-Band Activity Index for Files in a Folder — nbai_folder","title":"Narrow-Band Activity Index for Files in a Folder — nbai_folder","text":"NBAI describes relative amount narrow-band persistent sound activity, like Cicadas Orthopterans. index can used evaluate insect activity influence soundscape metrics (e.g., summary acoustic indices).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/nbai_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Narrow-Band Activity Index for Files in a Folder — nbai_folder","text":"","code":"nbai_folder(   folder = NULL,   recursive = FALSE,   list = NULL,   start = 0,   end = 1,   unit = \"minutes\",   channel = \"each\",   hpf = 0,   freq.res = 50,   cutoff = -60,   activity.cutoff = 10,   output.csv = \"nbai_results.csv\",   n.cores = -1,   verbose = TRUE )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/nbai_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Narrow-Band Activity Index for Files in a Folder — nbai_folder","text":"folder Character. path folder containing wave files analyze. recursive Logical. Whether search subfolders. Default TRUE. list optional list (subset) files folder analyze. start numerical. start reading Wave. end numerical. end reading Wave. unit character. Unit measurement 'start' 'end'. Options 'samples', 'seconds', 'minutes', 'hours'. Default 'minutes'. channel Character. Wave stereo want use one channel, pass either \"left\" \"right\" argument. want analyze mix channels, select \"mix\". NULL (default), results returned channel. hpf Numeric. High-pass filter. default (500 Hz) used always consistency unless signals interest threshold. freq.res Numeric. Frequency resolution Hz. value determines \"height\" frequency bin , therefore, window length used (sampling rate / frequency resolution). cutoff Numeric. Cutoff threshold defining sounds analyzed, dBFS. activity.cutoff Numeric. Cutoff percent activity. frequency bands active equal percentage considered \"active\" active band statistics. n.cores number cores use parallel processing. Use n.cores = -1 use one core. Default NULL (single-core processing). verbose Logical. TRUE, details dynamic range printed console.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/nbai_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Narrow-Band Activity Index for Files in a Folder — nbai_folder","text":"list containing: 1) binary spectrogram (mono), 2) tibble Narrow-Band Activity Index (NBI) summary statistics, 3) tibble NBI spectral, number rows equals number frequency bins analysis.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/nbai_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Narrow-Band Activity Index for Files in a Folder — nbai_folder","text":"","code":"if (FALSE) { # \\dontrun{ nbai(wave, channel = 'left', plot = TRUE, verbose = TRUE) } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ndsi.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalized Difference Soundscape Index — ndsi","title":"Normalized Difference Soundscape Index — ndsi","text":"Normalized Difference Soundscape Index (NDSI) REAL Kasten, et al. 2012. NDSI seeks \"estimate level anthropogenic disturbance soundscape computing ratio human-generated (anthrophony) biological (biophony) acoustic components found field collected sound samples\" (Kasten, et al. 2012).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ndsi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalized Difference Soundscape Index — ndsi","text":"","code":"ndsi(   wave,   w.len = 512,   anthro.min = 1000,   anthro.max = 2000,   bio.min = 2000,   bio.max = 11000,   rm.offset = TRUE )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ndsi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalized Difference Soundscape Index — ndsi","text":"wave object class Wave imported readWave function tuneR package. w.len numeric. window length FFT (sampling rate / frequency resolution). anthro.min minimum value range frequencies anthrophony. anthro.max maximum value range frequencies anthrophony. bio.min minimum value range frequencies biophony. bio.max maximum value range frequencies biophony. rm.offset logical. Whether remove DC offset.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ndsi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalized Difference Soundscape Index — ndsi","text":"wide format tibble NDSI values per channel (stereo), parameters used audio metadata","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ndsi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalized Difference Soundscape Index — ndsi","text":"","code":"ndsi(tropicalsound) #> Error: object 'tropicalsound' not found"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ndsi_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalized Difference Soundscape Index - folder input — ndsi_folder","title":"Normalized Difference Soundscape Index - folder input — ndsi_folder","text":"Normalized Difference Soundscape Index (NDSI) Kasten et al., et al. 2012. NDSI seeks \"estimate level anthropogenic disturbance soundscape computing ratio human-generated (anthrophony) biological (biophony) acoustic components found field collected sound samples\" (Kasten, et al. 2012). version optimized work path folder containing audio files.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ndsi_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalized Difference Soundscape Index - folder input — ndsi_folder","text":"","code":"ndsi_folder(   folder = NULL,   recursive = recursive,   list = NULL,   start = 0,   end = 1,   unit = \"minutes\",   w.len = 512,   anthro.min = 1000,   anthro.max = 2000,   bio.min = 2000,   bio.max = 11000,   rm.offset = TRUE,   output.csv = \"ndsi_results.csv\",   n.cores = -1 )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ndsi_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalized Difference Soundscape Index - folder input — ndsi_folder","text":"folder path folder containing audio files. recursive Logical. Whether search subfolders. Default TRUE. list optional list (subset) files folder analyze. start numerical. start reading Wave. end numerical. end reading Wave. unit character. Unit measurement 'start' 'end'. Options 'samples', 'seconds', 'minutes', 'hours'. Default 'minutes'. w.len numeric. Window length FFT (sampling rate / frequency resolution). anthro.min minimum value range frequencies anthrophony. anthro.max maximum value range frequencies anthrophony. bio.min minimum value range frequencies biophony. bio.max maximum value range frequencies biophony. rm.offset logical. Whether remove DC offset. output.csv character vector. 'save.csv' TRUE, optionally provide file name. Default name \"ndsi_results.csv\" n.cores number cores use parallel processing. Use n.cores = -1 use one core. Default NULL (single-core processing).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ndsi_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalized Difference Soundscape Index - folder input — ndsi_folder","text":"wide format tibble NDSI values per channel (stereo), parameters used audio metadata","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ndsi_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalized Difference Soundscape Index - folder input — ndsi_folder","text":"","code":"if (FALSE) { # \\dontrun{ path <- readClipboard() #use this to paste the folder path from the clipboard. ndsi_folder(path) } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/plot_diel_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Diel Indices with Optional LOESS Smoothing and Scaling Transformations — plot_diel_indices","title":"Plot Diel Indices with Optional LOESS Smoothing and Scaling Transformations — plot_diel_indices","text":"function takes dataset containing datetime index values creates interactive plot scaled indices time. Optionally, LOESS smoothing can applied line plots, replacing original lines. Users can apply various transformations data better comparison.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/plot_diel_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Diel Indices with Optional LOESS Smoothing and Scaling Transformations — plot_diel_indices","text":"","code":"plot_diel_indices(   data,   sensor_id = NULL,   plot.title = \"Circadian Indices\",   loess = TRUE,   span = 0.3,   scaling = \"none\" )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/plot_diel_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Diel Indices with Optional LOESS Smoothing and Scaling Transformations — plot_diel_indices","text":"data data frame containing datetime, index, value_avg columns. plot.title character string specifying title plot. Defaults \"Diel Index Patterns\". loess logical value indicating whether apply LOESS smoothing lines. Defaults TRUE. span numeric value indicating smoothing parameter LOESS. Defaults 0.3. scaling character string specifying type scaling/transformation apply. Options \"none\" (default), \"minmax\", \"maxabs\", \"zscore\", \"log\", \"robust\". sensor.id Character. Sensor identifier expressed 'sensor_id' column. NULL, data requester sensor plotted.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/plot_diel_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Diel Indices with Optional LOESS Smoothing and Scaling Transformations — plot_diel_indices","text":"plotly object showing time series scaled indices index group.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/plot_diel_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Diel Indices with Optional LOESS Smoothing and Scaling Transformations — plot_diel_indices","text":"","code":"if (FALSE) { # \\dontrun{   # Assuming `data` is a data frame with the necessary columns   plot_diel_indices(data, loess = TRUE, scaling = \"log\") } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectral_dynamics.html","id":null,"dir":"Reference","previous_headings":"","what":"Spectral Dynamics Analysis — spectral_dynamics","title":"Spectral Dynamics Analysis — spectral_dynamics","text":"Computes summary statistics based spectral similarity (consecutive pairwise comparison PSD vectors) user-defined time steps specified frequency bands.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectral_dynamics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spectral Dynamics Analysis — spectral_dynamics","text":"","code":"spectral_dynamics(   wave,   timestep = 5,   rmoffset = TRUE,   highpass = 0,   lfc = c(0, 2),   mfc = c(2, 10),   hfc = c(10, 16),   ufc = c(16, 24) )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectral_dynamics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spectral Dynamics Analysis — spectral_dynamics","text":"wave Wave object representing audio file analyzed. timestep Numeric value indicating time step (seconds) segmenting audio file calculate Power Spectral Densitiess. rmoffset Logical value indicating whether remove DC offset audio (default TRUE). highpass Numeric value indicating cutoff frequency high-pass filter (Hz, default 0 Hz). lfc numeric vector length 2 indicating lower frequency range (e.g., c(0, 2) 0-2 Hz). mfc numeric vector length 2 indicating mid-frequency range (e.g., c(2, 10) 2-10 Hz). hfc numeric vector length 2 indicating high-frequency range (e.g., c(10, 16) 10-16 Hz). ufc numeric vector length 2 indicating ultra-frequency range (e.g., c(16, 24) 16-24 Hz).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectral_dynamics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spectral Dynamics Analysis — spectral_dynamics","text":"tibble summary statistics (standard deviation, variance, mean, range) derived spectral similarity frequency band. frequency bands ordered highest (ufc) lowest (lfc).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectral_dynamics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spectral Dynamics Analysis — spectral_dynamics","text":"","code":"# Assuming `wave` is a Wave object loaded in R result <- spectral_dynamics(wave, timestep = 5, lfc = c(0, 2), mfc = c(2, 10), hfc = c(10, 16), ufc = c(16, 24)) #> Error: object 'wave' not found print(result) #> Error: object 'result' not found"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Spectrogram with Customizable Parameters — spectrogram","title":"Plot a Spectrogram with Customizable Parameters — spectrogram","text":"function generates plots spectrogram Wave object, allowing customization frequency resolution, amplitude threshold, plot aesthetics.  matrix obtained seewave's spectro() function without normalization amplitude values transformed dBFS. spectrogram plotted using ggplot2 optional dark mode.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Spectrogram with Customizable Parameters — spectrogram","text":"","code":"spectrogram(   wave,   freq.res = 100,   cutoff = -60,   dark.plot = FALSE,   plot.title = NULL )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Spectrogram with Customizable Parameters — spectrogram","text":"wave Wave object (tuneR package) representing audio data analyzed. freq.res Numeric. frequency resolution, specified Hz. determines window length spectrogram. Default 100 Hz. cutoff Numeric. minimum amplitude dB displayed spectrogram. Values threshold set NA. Default -60 dB. dark.plot Logical. Whether apply dark theme spectrogram plot. TRUE, background text dark. Default FALSE. plot.title Character. Optional title plot. provided, title displayed. Default NULL.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Spectrogram with Customizable Parameters — spectrogram","text":"ggplot2 plot spectrogram. function prints plot graphics device returns NULL.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Spectrogram with Customizable Parameters — spectrogram","text":"","code":"if (FALSE) { # \\dontrun{ # Load a Wave file wave <- tuneR::readWave(system.file(\"extdata\", \"test.wav\", package = \"tuneR\"))  # Generate a spectrogram with default parameters spectrogram(wave)  # Generate a spectrogram with a custom frequency resolution and dark plot mode spectrogram(wave, freq.res = 50, cutoff = -50, dark.plot = TRUE, plot.title = \"Spectrogram\") } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a 3D Spectrogram — spectrogram_3d","title":"Generate a 3D Spectrogram — spectrogram_3d","text":"function generates 3D surface plot spectrogram audio wave object. uses fixed frequency resolution allows setting minimum amplitude threshold plot. Optionally, cutoff plane can added plot better visualization amplitude floor.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a 3D Spectrogram — spectrogram_3d","text":"","code":"spectrogram_3d(   wave,   freq.res = 100,   min.amp = -60,   add.cutoff = NULL,   plot.title = NULL )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a 3D Spectrogram — spectrogram_3d","text":"wave wave object (imported tuneR package) containing audio data analyzed. freq.res Numeric value indicating frequency resolution Hz. Default 100 Hz. min.amp Numeric value representing minimum amplitude (dB) display. Amplitudes lower value clipped. Default -60 dB. add.cutoff Optional numeric value specifying amplitude cutoff plane added plot. NULL, cutoff plane added. plot.title Optional string set custom title plot. NULL, title added.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_3d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a 3D Spectrogram — spectrogram_3d","text":"plotly object representing 3D surface plot spectrogram.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a 3D Spectrogram — spectrogram_3d","text":"","code":"# Assuming 'wave' is a wave object: spectrogram_3d(wave, freq.res = 100, min.amp = -60, add.cutoff = -40, plot.title = \"3D Spectrogram\") #> Error: object 'wave' not found"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Binary Spectrogram — spectrogram_binary","title":"Generate a Binary Spectrogram — spectrogram_binary","text":"function generates binary spectrogram audio wave object. spectrogram calculated using Fast Fourier Transform (FFT) converted binary matrix based specified dB cutoff. Optionally, function can plot binary spectrogram.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Binary Spectrogram — spectrogram_binary","text":"","code":"spectrogram_binary(   wave,   channel = \"left\",   freq.res = 100,   cutoff = -50,   plot = FALSE,   plot.title = NULL,   ggplot = FALSE,   verbose = FALSE )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Binary Spectrogram — spectrogram_binary","text":"wave Wave object tuneR package representing audio signal. channel character string indicating channel use stereo audio. Options 'left', 'right', 'mix' (combining channels). NULL, left channel used default. freq.res numeric value specifying frequency resolution (Hz) spectrogram. Default 100 Hz. cutoff numeric value specifying dB cutoff threshold binary transformation. Amplitudes value set 0. Default -50 dB. plot logical value indicating whether plot binary spectrogram. Default TRUE. plot.title optional character string use title plot. Default NULL. ggplot logical value indicating whether use ggplot2 plot spectrogram. FALSE (default), R's base plot function used instead, rendering much faster. verbose logical value indicating whether print additional information (amplitude range cutoff) console. Default FALSE.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Binary Spectrogram — spectrogram_binary","text":"Returns binary matrix representing spectrogram, 1 represents amplitude cutoff 0 represents amplitude cutoff.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Binary Spectrogram — spectrogram_binary","text":"","code":"if (FALSE) { # \\dontrun{   # Load a wave file   wave <- tuneR::readWave(\"path_to_file.wav\")    # Generate and plot a binary spectrogram   binary_spec <- spectrogram_binary(wave, cutoff = -40, verbose = TRUE) } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_cutoff.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Spectrogram with Energy Cutoff — spectrogram_cutoff","title":"Generate a Spectrogram with Energy Cutoff — spectrogram_cutoff","text":"function generates spectrogram wave object applies cutoff filter amplitude values specified threshold. resulting spectrogram can plotted using either ggplot2 base R plotting functions.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_cutoff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Spectrogram with Energy Cutoff — spectrogram_cutoff","text":"","code":"spectrogram_cutoff(   wave,   cutoff = -60,   freq.res = 100,   plot = FALSE,   plot.title = NULL,   ggplot = TRUE,   noise.red = NULL,   verbose = FALSE )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_cutoff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Spectrogram with Energy Cutoff — spectrogram_cutoff","text":"wave Wave object containing audio data. cutoff numeric value specifying dB cutoff threshold spectrogram. Values threshold clipped NA. plot logical value indicating whether plot resulting spectrogram. Defaults FALSE. plot.title optional string specifying title plot. Defaults NULL. ggplot logical value indicating whether use ggplot2 plotting. FALSE, base R plotting used generate plot. Defaults TRUE. noise.red Character. Either NULL, 'rows' 'cols'. Determins direction apply noise reduction (mean subtraction). verbose Logical. TRUE, ancillary messages printed console.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_cutoff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Spectrogram with Energy Cutoff — spectrogram_cutoff","text":"Returns spectrogram matrix cutoff applied. plot = TRUE, plot spectrogram displayed.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_cutoff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Spectrogram with Energy Cutoff — spectrogram_cutoff","text":"","code":"if (FALSE) { # \\dontrun{ wave <- seewave::synth(d=1, f=8000, cf=1000) spectrogram_cutoff(wave, cutoff = -40, plot = TRUE, plot.title = \"Filtered Spectrogram\") } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_plotly.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Spectrogram Using Plotly — spectrogram_plotly","title":"Plot Spectrogram Using Plotly — spectrogram_plotly","text":"function generates spectrogram plot using Plotly, allowing customization frequency resolution, amplitude normalization, plot appearance. can display spectrogram decibels (dBFS) linear scale, apply minimum amplitude threshold, customize plot dark themes grid settings.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_plotly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Spectrogram Using Plotly — spectrogram_plotly","text":"","code":"spectrogram_plotly(   wave,   norm = FALSE,   freq.res = 100,   overlap = 50,   zp = 0,   min.amp = -60,   dark.plot = FALSE,   grid = TRUE,   plot.title = NULL )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_plotly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Spectrogram Using Plotly — spectrogram_plotly","text":"wave Wave object representing audio signal analyzed. norm Logical. TRUE, amplitude values normalized. Defaults FALSE. freq.res Numeric. frequency resolution Hz, determines window length spectrogram. Defaults 100. overlap Numeric. percentage overlap successive windows spectrogram. Defaults 50. min.amp Numeric. minimum amplitude threshold decibels (dB) spectrogram. Values clipped. Defaults -60 dB. dark.plot Logical. TRUE, applies dark theme plot. Defaults FALSE. grid Logical. TRUE, grid lines shown plot. Defaults TRUE. plot.title Character. Optional. title plot. NULL, title displayed. Defaults NULL.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_plotly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Spectrogram Using Plotly — spectrogram_plotly","text":"Plotly object containing spectrogram heatmap.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/spectrogram_plotly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Spectrogram Using Plotly — spectrogram_plotly","text":"","code":"# Load a Wave object data(orni) #> Warning: data set 'orni' not found # Generate a Plotly spectrogram p <- spectrogram_plotly(orni, norm = TRUE, freq.res = 200, min.amp = -50, dark.plot = TRUE, plot.title = \"Spectrogram\") #> Error: object 'orni' not found p #> Error: object 'p' not found"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/summary_spectrograms.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate and Save Summary Spectrograms — summary_spectrograms","title":"Generate and Save Summary Spectrograms — summary_spectrograms","text":"function generates saves spectrogram images various summary statistics (mean, max, min, median, mode) recording input data frame. Spectrograms created specific wave files indicated data, options normalize remove DC offset.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/summary_spectrograms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate and Save Summary Spectrograms — summary_spectrograms","text":"","code":"summary_spectrograms(   summary_df,   parent_dir = NULL,   output_dir = \"summary_spectros_se2\",   rmdcoff = TRUE,   norm = FALSE )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/summary_spectrograms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate and Save Summary Spectrograms — summary_spectrograms","text":"summary_df data frame containing summary statistics recordings. include columns sensor_id, channel, index, columns named closest_to_<stat> categories mean, max, min, median, mode, referring closest wave file statistic. parent_dir character string specifying parent directory containing .wav files. Defaults NULL, sets parent_dir current working directory. output_dir character string specifying directory save generated spectrogram images. aults \"summary_spectrograms_se2\". rmdcoff logical value indicating whether remove DC offset wave files generating spectrograms. Defaults TRUE. norm logical value indicating whether normalize spectrogram. Defaults FALSE.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/summary_spectrograms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate and Save Summary Spectrograms — summary_spectrograms","text":"None. Spectrogram images saved specified output directory.","code":""},{"path":[]},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/tai.html","id":null,"dir":"Reference","previous_headings":"","what":"Trill Activity Index — tai","title":"Trill Activity Index — tai","text":"function calculates trill index audio wave object analyzing frequency modulation pattern time. can operate either binary continuous modes provides options generating visual plots trill activity. function also identifies potential noise issues low- mid-frequency ranges.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/tai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trill Activity Index — tai","text":"","code":"tai(   wave,   channel = \"each\",   hpf = 0,   cutoff = -60,   n.windows = 120,   freq.res = 100,   plot = FALSE,   plot.title = NULL,   verbose = TRUE )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/tai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trill Activity Index — tai","text":"wave wave object analyzed. channel Channel channels analyzed. Options \"left\", \"right\", \"\", \"mix\". cutoff Numeric. cutoff decibels spectrogram generation. n.windows Numeric. Number time windows divide signal analysis. Default 60. freq.res Numeric. Frequency resolution (Hz) spectrogram analysis. Default 100. plot Logical. TRUE, generates plot trill index time. Default TRUE. plot.title Character. title used plot. Default NULL. verbose Logical. TRUE, provides detailed output function's execution. Default FALSE.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/tai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trill Activity Index — tai","text":"list containing: summary: tibble summarizing TAI statistics, including values low mid-frequency noise. spectral: 1-column matrix mean trill index values frequency bin","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/tai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trill Activity Index — tai","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage: wave <- read_audio(\"example.wav\") trill_results <- tai(wave, channel = \"left\", binary = TRUE, plot = TRUE) } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/tai_folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Trill Activity Index for all the Files in a Folder — tai_folder","title":"Calculate Trill Activity Index for all the Files in a Folder — tai_folder","text":"function calculates trill index sound wave object analyzing frequency modulation pattern time. can operate either binary continuous modes provides options generating visual plots trill activity. function also identifies potential noise issues low- mid-frequency ranges.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/tai_folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Trill Activity Index for all the Files in a Folder — tai_folder","text":"","code":"tai_folder(   folder = NULL,   recursive = FALSE,   list = NULL,   start = 0,   end = 1,   unit = \"minutes\",   channel = \"each\",   hpf = 0,   cutoff = -60,   n.windows = 120,   freq.res = 100,   plot = FALSE,   plot.title = NULL,   verbose = TRUE,   output.csv = \"tai_results.csv\",   n.cores = -1 )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/tai_folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Trill Activity Index for all the Files in a Folder — tai_folder","text":"folder Character. path folder containing WAV files analyze. recursive Logical. Whether search subfolders. Default TRUE. list optional list (subset) files folder analyze. provided, files outside list excluded. start numerical. start reading Wave. end numerical. end reading Wave. unit character. Unit measurement 'start' 'end'. Options 'samples', 'seconds', 'minutes', 'hours'. Default 'minutes'. channel Channel channels analyzed. Options \"left\", \"right\", \"\", \"mix\". cutoff Numeric. cutoff decibels spectrogram generation. n.windows Numeric. Number time windows divide signal analysis. Default 60. freq.res Numeric. Frequency resolution (Hz per bin) spectrogram analysis. Default 100. plot Logical. TRUE, generates plot trill index time. Default TRUE. plot.title Character. title used plot. Default NULL. verbose Logical. TRUE, provides detailed output function's execution. Default FALSE. wave wave object analyzed.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/tai_folder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Trill Activity Index for all the Files in a Folder — tai_folder","text":"tibble summarizing TAI statistics, including values low mid-frequency noise.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/tai_folder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Trill Activity Index for all the Files in a Folder — tai_folder","text":"","code":"if (FALSE) { # \\dontrun{ path <- \"path/to/folder\" tai_results <- tai_folder(path) } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_circadian.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Circadian Time-Series with LOESS Smoothing and Scaling Transformations — ts_circadian","title":"Plot Circadian Time-Series with LOESS Smoothing and Scaling Transformations — ts_circadian","text":"function takes dataset containing datetime index values creates interactive plot scaled indices time. Optionally, LOESS smoothing can applied line plots, replacing original lines. Users can apply various transformations data better comparison.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_circadian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Circadian Time-Series with LOESS Smoothing and Scaling Transformations — ts_circadian","text":"","code":"ts_circadian(   data,   sensor_id = NULL,   plot.title = \"Circadian Indices\",   loess = TRUE,   span = 0.3,   scaling = \"none\" )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_circadian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Circadian Time-Series with LOESS Smoothing and Scaling Transformations — ts_circadian","text":"data data frame containing datetime, index, value_avg columns. plot.title character string specifying title plot. Defaults \"Diel Index Patterns\". loess logical value indicating whether apply LOESS smoothing lines. Defaults TRUE. span numeric value indicating smoothing parameter LOESS. Defaults 0.3. scaling character string specifying type scaling/transformation apply. Options \"none\" (default), \"minmax\", \"maxabs\", \"zscore\", \"log\", \"robust\". sensor.id Character. Sensor identifier expressed 'sensor_id' column. NULL, data requester sensor plotted.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_circadian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Circadian Time-Series with LOESS Smoothing and Scaling Transformations — ts_circadian","text":"plotly object showing time series scaled indices index group.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_circadian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Circadian Time-Series with LOESS Smoothing and Scaling Transformations — ts_circadian","text":"","code":"if (FALSE) { # \\dontrun{   # Assuming `data` is a data frame with the necessary columns   ts_circadian(data, loess = TRUE, scaling = \"log\") } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Create time series analysis and visualization for acoustic index data — ts_long","title":"Create time series analysis and visualization for acoustic index data — ts_long","text":"function processes acoustic index data, summarizes day/week/month, creates interactive visualizations optional smoothing. handles datetime parsing filenames, data summarization different temporal resolutions, generates plots range ribbons average values.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create time series analysis and visualization for acoustic index data — ts_long","text":"","code":"ts_long(   data,   index_name = \"adi\",   extra_title = \"\",   start = NULL,   end = NULL,   span = 0.3,   summarize_by = \"day\" )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create time series analysis and visualization for acoustic index data — ts_long","text":"data data frame containing acoustic index data. Must include columns: 'index', 'file_name', 'value_avg'. index_name name index analyze (default: \"adi\"). Used plot labels. extra_title Additional text include plot title (default: \"\"). start Optional start date filtering data (format: \"YYYY-MM-DD\"). end Optional end date filtering data (format: \"YYYY-MM-DD\"). span Span parameter LOESS smoothing (default: 0.3). summarize_by Temporal resolution main plot: \"day\", \"week\", \"month\" (default: \"day\").","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create time series analysis and visualization for acoustic index data — ts_long","text":"list containing: daily_tibble: Data summarized day weekly_tibble: Data summarized week monthly_tibble: Data summarized month plot: Interactive plotly visualization time series","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_long.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create time series analysis and visualization for acoustic index data — ts_long","text":"function performs following steps: Extracts datetime information filenames Parses datetime using multiple possible formats Summarizes data daily, weekly, monthly levels Filters data based start/end dates provided Creates interactive plot range ribbons average line Optionally adds LOESS smoothing enough data points exist","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create time series analysis and visualization for acoustic index data — ts_long","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage result <- ts_long(acoustic_data)  # With custom parameters result <- ts_long(acoustic_data,                    index_name = \"ndsi\",                   extra_title = \"Forest Site A\",                   start = \"2023-01-01\",                   end = \"2023-06-30\",                   summarize_by = \"week\") } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_plus_images.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Interactive Time Series Plot with Image Popups — ts_plus_images","title":"Create Interactive Time Series Plot with Image Popups — ts_plus_images","text":"Creates interactive time series plot using Chart.js users can click data points view corresponding images modal popup. Images matched data points based dates extracted filenames. Includes zoom functionality horizontal axis.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_plus_images.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Interactive Time Series Plot with Image Popups — ts_plus_images","text":"","code":"ts_plus_images(   data,   image_folder = NULL,   output_file = NULL,   var_column = \"mean_centroid\",   variable_name = NULL,   identifier = NULL )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_plus_images.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Interactive Time Series Plot with Image Popups — ts_plus_images","text":"data data.frame containing time series data. Must include 'date' column. image_folder Character. Path folder containing images. Images dates YYYYMMDD format filenames (e.g., \"sensor_data_20231215.png\"). NULL, images displayed. Default NULL. output_file Character. Path output HTML file. provided, creates standalone HTML file accompanying image folder. NULL, creates temporary file opens browser. Default NULL. variable_name Character. Descriptive name y-variable use plot labels title (e.g., \"Temperature\", \"BBAI Centroid\"). NULL, uses y_column name. Default NULL. identifier Character. identifier include plot title (e.g., sensor ID, location name). provided, shown \"Interactive Time Series - variable_name (identifier)\". Default NULL. y_column Character. Name column data use y-axis values. Default \"mean_centroid\".","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_plus_images.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Interactive Time Series Plot with Image Popups — ts_plus_images","text":"Invisibly returns HTML content character string.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_plus_images.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Interactive Time Series Plot with Image Popups — ts_plus_images","text":"function creates interactive time series plot : Data points corresponding images appear red circles Data points without images appear blue circles Clicking data points shows detailed information Clicking points images opens modal full-size image plot includes tooltips keyboard support (Esc close modals) Zoom controls horizontal axis (drag zoom, double-click reset) Image files contain dates YYYYMMDD format filenames. Supported image formats: PNG, JPG, JPEG, GIF, BMP. output_file specified, function creates: standalone HTML file specified location \"ts_images\" subfolder containing copies relevant images","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/ts_plus_images.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Interactive Time Series Plot with Image Popups — ts_plus_images","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage ts_plus_images(my_data)  # With images and custom labels ts_plus_images(my_data,                 image_folder = \"path/to/images\",                y_column = \"temperature\",                variable_name = \"Temperature (°C)\",                identifier = \"Sensor-001\")  # Save to HTML file ts_plus_images(my_data,                image_folder = \"path/to/images\",                output_file = \"temperature_analysis.html\",                y_column = \"temp\",                variable_name = \"Daily Temperature\",                identifier = \"Weather Station A\") } # }"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/var_diel_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Variance Diel Spectrogram from multiple Audio Recordings — var_diel_spec","title":"Generate a Variance Diel Spectrogram from multiple Audio Recordings — var_diel_spec","text":"Creates spectrogram visualization daily acoustic patterns using multiple recordings, options noise floor clipping parallel processing. Specifically, takes variance acoustic energy frequency bin recording merges resulting vectors summary spectrogram.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/var_diel_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Variance Diel Spectrogram from multiple Audio Recordings — var_diel_spec","text":"","code":"var_diel_spec(   folder = NULL,   recursive = TRUE,   list = NULL,   title = \"\",   freq_res = 50,   n.cores = -1,   cutoff = -100,   max_amp = -10,   plot = TRUE,   save_plot = TRUE,   save_to = \"./diel_plots\",   dc_on = NULL,   dc_off = NULL,   target_dates = NULL )"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/var_diel_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Variance Diel Spectrogram from multiple Audio Recordings — var_diel_spec","text":"folder Path folder containing WAV files (default: current working directory). recursive Logical. Whether search files subfolders. Default: TRUE. list list WAV files parse. waves must working directory (default: NULL). title Character string. Plot title (default: empty). freq_res Frequency resolution Hz FFT (default: 50) n.cores Number cores parallel processing (-1 available cores) cutoff Minimum dBFS value (noise floor). Values clipped (default: -100) max_amp Maximum dBFS value represented color scale. plot Whether generate plot (default: TRUE) save_plot Logical. Whether save plot save_to Character. save_plot = TRUE, provide path folder file stored. path provided, new folder \"diel_plots\" created current working directory (default) save exported files. dc_on Number minutes recorded \"\". Used identify expected number files per day. dc_off Number minutes recorded \"\". Used identify expected number files per day. target_dates Either single date multiple dates format \"YYYY-MM-DD\" analyzed. NULL (default), dates folder parsed. provide range, see Details.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/var_diel_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Variance Diel Spectrogram from multiple Audio Recordings — var_diel_spec","text":"list containing: plot - ggplot2 spectrogram object spectral_data - Wide-format spectral data (freq bins × recordings) plot_data - Long-format data plotting file_metadata - File information extracted metadata overall_range - dBFS range data","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/var_diel_spec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a Variance Diel Spectrogram from multiple Audio Recordings — var_diel_spec","text":"function parses files folder list groups date, creating single diel spectrogram . parse subset range dates contained folder, use seq().","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/wave_integrity_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute file integrity diagnostics for several folders containing WAV files — wave_integrity_batch","title":"Compute file integrity diagnostics for several folders containing WAV files — wave_integrity_batch","text":"Compute file integrity diagnostics several folders containing WAV files","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/wave_integrity_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute file integrity diagnostics for several folders containing WAV files — wave_integrity_batch","text":"","code":"wave_integrity_batch(parent_folder, n.cores = -1)"},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/wave_integrity_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute file integrity diagnostics for several folders containing WAV files — wave_integrity_batch","text":"parent_folder Character. path parent folder containing folders WAV files. n.cores Numeric. Number cores used parallel processing. Defaults -1, means one core.","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/wave_integrity_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute file integrity diagnostics for several folders containing WAV files — wave_integrity_batch","text":"tibble summary data file size, including last day complete recordings days corrupted files (.e., smaller ).","code":""},{"path":"https://panchorivasf.github.io/SoundEcology2/reference/wave_integrity_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute file integrity diagnostics for several folders containing WAV files — wave_integrity_batch","text":"","code":"if (FALSE) { # \\dontrun{ wave_integrity_batch(parentFolder) } # }"}]
