% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spectrogram_binary.R
\name{spectrogram_binary}
\alias{spectrogram_binary}
\title{Generate a Binary Spectrogram}
\usage{
spectrogram_binary(
  wave,
  channel = "left",
  freq.res = 100,
  cutoff = -50,
  plot = FALSE,
  plot.title = NULL,
  verbose = FALSE,
  ggplot = FALSE
)
}
\arguments{
\item{wave}{A \code{Wave} object from the \code{tuneR} package representing the audio signal.}

\item{channel}{A character string indicating which channel to use for stereo audio. Options are \code{'left'}, \code{'right'}, or \code{'mix'} (for combining both channels). If \code{NULL}, the left channel is used by default.}

\item{freq.res}{A numeric value specifying the frequency resolution (in Hz) of the spectrogram. Default is 100 Hz.}

\item{cutoff}{A numeric value specifying the dB cutoff threshold for the binary transformation. Amplitudes below this value will be set to 0. Default is -50 dB.}

\item{plot}{A logical value indicating whether to plot the binary spectrogram. Default is \code{TRUE}.}

\item{plot.title}{An optional character string to use as the title of the plot. Default is \code{NULL}.}

\item{verbose}{A logical value indicating whether to print additional information (such as the amplitude range and cutoff) to the console. Default is \code{FALSE}.}

\item{ggplot}{A logical value indicating whether to use ggplot2 to plot the spectrogram. If FALSE (default), R's base plot function is used instead, rendering much faster.}
}
\value{
Returns a binary matrix representing the spectrogram, where \code{1} represents amplitude above the cutoff and \code{0} represents amplitude below the cutoff.
}
\description{
This function generates a binary spectrogram from an audio \code{wave} object. The spectrogram is calculated using the Fast Fourier Transform (FFT) and then converted into a binary matrix based on a specified dB cutoff. Optionally, the function can plot the binary spectrogram.
}
\examples{
\dontrun{
  # Load a wave file
  wave <- tuneR::readWave("path_to_file.wav")

  # Generate and plot a binary spectrogram
  binary_spec <- spectrogram_binary(wave, cutoff = -40, verbose = TRUE)
}
}
