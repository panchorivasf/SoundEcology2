% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spectrogram_plotly.R
\name{spectrogram_plotly}
\alias{spectrogram_plotly}
\title{Plot Spectrogram Using Plotly}
\usage{
spectrogram_plotly(
  wave,
  norm = FALSE,
  freq.res = 100,
  overlap = 50,
  zp = 0,
  min.amp = -60,
  dark.plot = FALSE,
  grid = TRUE,
  plot.title = NULL
)
}
\arguments{
\item{wave}{A Wave object representing the audio signal to be analyzed.}

\item{norm}{Logical. If \code{TRUE}, the amplitude values are normalized. Defaults to \code{FALSE}.}

\item{freq.res}{Numeric. The frequency resolution in Hz, which determines the window length for the spectrogram. Defaults to 100.}

\item{overlap}{Numeric. The percentage overlap between successive windows in the spectrogram. Defaults to 50.}

\item{min.amp}{Numeric. The minimum amplitude threshold in decibels (dB) for the spectrogram. Values below this will be clipped. Defaults to -60 dB.}

\item{dark.plot}{Logical. If \code{TRUE}, applies a dark theme to the plot. Defaults to \code{FALSE}.}

\item{grid}{Logical. If \code{TRUE}, grid lines are shown in the plot. Defaults to \code{TRUE}.}

\item{plot.title}{Character. Optional. A title for the plot. If \code{NULL}, no title is displayed. Defaults to \code{NULL}.}
}
\value{
A Plotly object containing the spectrogram heatmap.
}
\description{
This function generates a spectrogram plot using Plotly, allowing for customization of frequency resolution, amplitude normalization, and plot appearance.
It can display the spectrogram in decibels (dBFS) or linear scale, apply a minimum amplitude threshold, and customize the plot with dark themes and grid settings.
}
\examples{
# Load a Wave object
data(orni)
# Generate a Plotly spectrogram
p <- spectrogram_plotly(orni, norm = TRUE, freq.res = 200, min.amp = -50, dark.plot = TRUE, plot.title = "Spectrogram")
p
}
